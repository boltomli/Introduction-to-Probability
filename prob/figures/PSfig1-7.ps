%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 5.0
%%For: (Fuxing) (Dartmouth College)
%%Title: (PSfig1.7.ps)
%%CreationDate: (3/28/97) (8:43 AM)
%%BoundingBox: -37 486 641 622
%%HiResBoundingBox: -36.5 486.4426 640.5 622
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 2.1
%AI3_ColorUsage: Black&White
%%CMYKCustomColor: 1 0 0.55 0 (Aqua)
%%+ 1 0.5 0 0 (Blue)
%%+ 0.5 0.4 0.3 0 (Blue Gray)
%%+ 0.8 0.05 0 0 (Blue Sky)
%%+ 0.5 0.85 1 0 (Brown)
%%+ 1 0.9 0.1 0 (Dark Blue)
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: -59 121 671 673
%AI3_DocumentPreview: Macintosh_Pic
%AI5_ArtSize: 792 612
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -54 732 -1 794 445 18 0 1 160 136
%AI5_OpenViewLayers: 7
%%EndComments
%%BeginProlog

% ------------------------------------------------------
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
% ------------------------------------------------------

userdict /Adobe_level2_AI5 23 dict dup begin
	put

% use packed arrays immediately
	% packedarray emulation
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
		end
		0
	} if
	pop

% activate packing now
	userdict /defaultpacking currentpacking put true setpacking


% initialize, terminate
	% note : no binding loop needed here by design

	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
			end
		} if
	} bind def

% mark for later stack clean-up
	mark

% custom color business
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch aload pop pop
			4
			{
				4 index mul 4 1 roll
			} repeat
			5 -1 roll pop
			setcmykcolor
		}	% don't bind 'setcmykcolor in this procedure
		def
	} if

%	new version checks for non-numeric version strings (5.0.1 fix bh 10/25/93)
%	/gt38? {version cvx exec} stopped {pop true} {38 gt} ifelse def
	
%	newer version handles errors on clones with cvx or exec which would leave junk on the stack
%	(bh 12/2/93)
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def

	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put

% test for Level 2 availability
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put


/level2ScreenFreq		%	halftoneDict level2ScreenFreq screenFreq
{
	begin
		60	% 60 lpi is default
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
	end
} bind def

userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put

level2? not
	{
		% LEVEL 1+ EMULATIONS (typesetter/color printer extensions)

		% cmyk => gray conversion emulation
		% note this revision approved by Ed Taft
		% for correcting the out of gamut problem
		% in our current emulations

		% don't bind these guys so 'setgray/currentgray can be overloaded
		/setcmykcolor where not
		{
			% see red book II, pp. 305
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if

		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if


		% LEVEL 2 EMULATIONS

		% setoverprint emulation
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if

		% selectfont emulation
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if

		% cshow emulation
		/cshow where not
		{
			% {proc} (string)
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if

% clean up
	cleartomark

	/anyColor?
	{
		add add add 0 ne
	} bind def

	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def

	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def

	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put

% *** other separation state tests if we're not on a composite page	
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
		end
	} if

	end defaultpacking setpacking

%%EndResource

% ------------------------------------------------------
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
% ------------------------------------------------------

currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize	% varsDict mainDict initialize -
{
	begin	% begin main procset
	begin	% begin vars procset
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
	end

	% take main and vars off the stack
	end
	end

	Adobe_typography_AI5 begin
} def
/terminate	% - terminate -
{
	currentdict Adobe_typography_AI5 eq
	{
		end
	} if
} def

% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef

	% pointer for sequential encodings
	/_pntr 0 ddef
	{
		% get bottom object
		counttomark -1 roll

		% is it a mark ?
		dup type dup /marktype eq
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....

			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop

	% return the modified encoding
	_tempEncode
} def

/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def

% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ
{
	% set weight vector (if present)
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse

	% platform dependent coding flag
	/_useNativeEncoding exch def

	% pop fontScript & direction
	pop pop

	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict

	begin

	% copy all the values but the FID
	% into the new dictionary
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	% discard last mark
	pop

	% define FontName
	/FontName exch def

	% if no re-encoding stream is present
	% then if the base encoding vector of the font
	% is the same as StandardEncoding
	% and the use platform encoding flag is true
	% then install AI platform encoding
	% else leave the base encoding in effect

	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		% clean up
		cleartomark
	}
	{
		% custom encoding to be done
		% start off with a copy of the font's standard encoding
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
	end

	% register the new font
	definefont pop
} def

% text painting operators
/tr	% string tr ax ay string 
{
	_ax _ay 3 2 roll
} def
/trj	% string trj cx cy fillchar ax ay string 
{
	_cx _cy _sp _ax _ay 6 5 roll
} def

/a0
{
	/Tx	% text							% textString Tx -
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx	% text							% textString Tx -
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def

/e0
{
	/Tx	% text							% textString Tx -
	{
		tr _psf
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		trj _pjsf
	} ddef
} def

/e1
{
	/Tx	% text							% textString Tx -
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def

/i0
{
	/Tx	% text							% textString Tx -
	{
		tr sp
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		trj jsp
	} ddef
} def

/i1
{
	W N
} def

/o0
{
	/Tx	% text							% textString Tx -
	{
		tr sw rmoveto
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		trj swj rmoveto
	} ddef
} def

/r0
{
	/Tx	% text							% textString Tx -
	{
		tr _ctm _pss
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		trj _ctm _pjss
	} ddef
} def

/r1
{
	/Tx	% text							% textString Tx -
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def

% font operators

% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def

/TO	% end text					% TO -
{
	iTe _ctm setmatrix newpath
} def

% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def

/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def

% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def

/iTm	% internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def

/Tm	% set text matrix				% a b c d tx ty Tm -
{
	_tm astore pop iTm 0 0 moveto
} def

/Td	% translate text matrix 		% tx ty Td -
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def

/iTe	% end render					% - iTe -
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def


% Attributes
/Ta	% set alignment					% alignment Ta -
{
	pop
} def

/Tf	% set font name and size		% fontname size Tf -
{
	dup 1000 div /_fScl exch ddef
% was  (bh 11/23/93)
% 	exch findfont exch scalefont setfont
%
	selectfont
} def

/Tl	% set leading					% leading paragraphLeading Tl -
{
	pop
	0 exch _leading astore pop
} def

/Tt	% set user tracking				% userTracking Tt -
{
	pop
} def

/TW	% set word spacing				% minSpace optSpace maxSpace TW -
{
	3 npop
} def

/Tw	% set computed word spacing		% wordSpace Tw
{
	/_cx exch ddef
} def

/TC	% set character spacing			% minSpace optSpace maxSpace TC -
{
	3 npop
} def

/Tc	% set computed char spacing 	% charSpace Tc -
{
	/_ax exch ddef
} def

/Ts	% set super/subscripting (rise)	% rise Ts -
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def

/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
	3 npop
} def

/Tz	% set horizontal scaling		% scalePercent Tz -
{
	100 div /_hs exch ddef
	iTm
} def

/TA	% set pairwise kerning			% autoKern TA -
%	autoKern = 0 -> no pair kerning
%			 = 1 -> automatic pair kerning
{
	pop
} def

/Tq	% set hanging quotes			% hangingQuotes Tq -
%	hangingQuotes 	= 0 -> no hanging quotes
%			 		= 1 -> hanging quotes
{
	pop
} def

/Th	% set hyphenation				% hyphenate? limitLines? minLead minTail maxLines Th -
% 	hyphenate?	= 0 -> don't hyphenate
%				= 1 -> do hyphenate
% 	limitLines? = 0 -> no limit
%				= 1 -> limit consecutive hyphenated lines
%	minLead		Closest hyphen to beginning of word (0..n)
% 	minTail		Closest hyphen to end of word (0..n)
% 	maxLines	Maximum number of consecutive hyphenated lines (1..n)
{
	pop pop pop pop pop
} def


% Text Bodies
/TX
{
	pop
} def

% /Tx	% non-justified text			% textString Tx -
% /Tj	% justified text				% textString Tj -

/Tk	% kern							% autoKern kernValue Tk -
%  	autoKern = 0 -> manual kern, = 1 -> auto kern
%	kernValue = kern value in em/1000 space
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
	2 npop
} def

/T*	% carriage return & line feed	% - T* -
{
	_leading aload pop neg Td
} def

/T*-	% carriage return & negative line feed	% - T*- -
{
	_leading aload pop Td
} def

/T-	% print a discretionary hyphen	% - T- -
{
	% backup the pen position by the letterspacing so that
	% full-justified, auto-hyphenated lines display properly
	% [John Farmer 11/18/95]
	_ax neg 0 rmoveto
	_hyphen Tx
} def

/T+	% discretionary hyphen hyphen	% - T+ -
{
} def

/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def

/TS	% special chars					% textString justified TS -
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def

% Tab extensions for 5.5 (Glenn Reid 1/26/94)

/Xb % begin tab definitions			% <unused> tabCount Xb -
{
	pop pop
} def
/Tb /Xb load def

/Xe % one tab stop					% leader(char) decimal(char) type(int) distance Xe -
{
	pop pop pop pop
} def
/Te /Xe load def

/XB % end tab definitions			% - XB -
{
} def
/TB /XB load def

currentdict readonly pop
end
setpacking

%%EndResource

% ------------------------------------------------------
%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0
% ColorImage Emulation and Separation Code for Grayscale, RGB and CMYK images
% Version 1.0 12/25/95
% Copyright (C) 1995-96
% Adobe Systems Incorporated
% All Rights Reserved
% ------------------------------------------------------

userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 17 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin

% ------------------------------------------------------
% Routine Overview
% 
%	String Iterators
%		WalkRGBString (given a single source string, convert each pixel to cmyk and call a proc)
%		WalkCMYKString (given a single source string, get the components and call a proc)
% 
%	Level1 Emulator Routines
%		StuffRGBIntoGrayString
%		RGBToGrayImageProc
%		StuffCMYKIntoGrayString 
%		CMYKToGrayImageProc 
%		ColorImageCompositeEmulator 
% 
%	ColorImage CMYK Separation Hacks (For [Applications] that only support planar images)
%		CMYKToSeparatedCMYKImageProc
% 
%	ColorImage and Utility Routines.
%		FourEqual
%		TestPlateIndex
%		colorimage
% 
% ------------------------------------------------------	

/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def

/terminate { end } def

currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 14 dict def
} if

Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
end

/WalkRGBString null def
/WalkCMYKString null def

/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def

/SeparateCMYKImageProc null def

/FourEqual null def
/TestPlateIndex null def

% define _colorimage if it doesn't already exist
currentdict /_colorimage known not
{
	/colorimage where
	{
		% sourcedictionary (systemdict or a separation proc redefinition)
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if

/_currenttransfer systemdict /currenttransfer get def

/colorimage null def
/XI null def

% ------------------------------------------------------
% rgb proc out --WalkRGBString--
% ------------------------------------------------------

/WalkRGBString
{
	% rgb proc out
	0 3 index

	% rgb proc out outindex rgb
	dup length 1 sub 0 3 3 -1 roll
	{
		% rgb proc out outindex rgb index
		3 getinterval { } forall

		% call the stuff proc
		% rgb proc out outindex r g b
		5 index exec

		% push rgb for the next loop iteration
		% rgb proc out outindex
		3 index
		% rgb proc out outindex rgb
	} for
	
	% clean up the stack
	% rgb proc out outindex rgb
	 5 { pop } repeat

} def

% ------------------------------------------------------
% cmyk proc gray --WalkCMYKString--
% ------------------------------------------------------

/WalkCMYKString
{
	% cmyk proc gray
	0 3 index

	% cmyk proc gray grayindex cmyk
	dup length 1 sub 0 4 3 -1 roll
	{
		% cmyk proc gray grayindex cmyk index
		4 getinterval { } forall
		
		% cmyk proc gray grayindex c m y k
		6 index exec
		
		% cmyk proc gray grayindex
		3 index
		
		% cmyk proc gray grayindex cmyk
	} for
	
	% clean up the stack
	% cmyk proc gray grayindex cmyk
	5 { pop } repeat
	
} def

% ------------------------------------------------------
% gray grayindex r g b --StuffRGBIntoGrayString-- gray grayindex
% ------------------------------------------------------

/StuffRGBIntoGrayString
{
	% gray grayindex r g b
	.11 mul exch
	
	% gray grayindex r bk g
	.59 mul add exch
	
	% gray grayindex bkgk r
	.3 mul add
	
	% gray grayindex k
	cvi 3 copy put
	
	% gray grayindex k
	pop 1 add
} def

% ------------------------------------------------------
% --RGBToGrayImageProc-- string
% ------------------------------------------------------

/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin	
		% call the source proc to get the chunky rgb string
		sourcearray 0 get exec

		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)
		% rgb
		dup length 3 idiv string

		% roll off a copy of the gray string
		% rgb gray
		dup 3 1 roll 
		
		% push the stuff proc that we want called by WalkRGBString
		% gray rgb gray
		/StuffRGBIntoGrayString load exch

		% call the rgb conversion iterator
		% gray rgb proc gray
		WalkRGBString

		% return the gray string
		% gray	
	end
} def

% ------------------------------------------------------
% gray grayindex c m y k --StuffCMYKIntoGrayString-- gray grayindex
% ------------------------------------------------------

/StuffCMYKIntoGrayString
{
	% gray grayindex c m y k
	exch .11 mul add
	
	% gray grayindex c m yk
	exch .59 mul add
	
	% gray grayindex c mkyk
	exch .3 mul add
	
	% pin k to 255
	% gray gray index k
	dup 255 gt { pop 255 } if
	
	% gray grayindex k
	255 exch sub cvi 3 copy put
	
	% gray grayindex k
	pop 1 add
} def

% ------------------------------------------------------
% --CMYKToGrayImageProc-- string
% ------------------------------------------------------

/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		% call the source proc to get the chunky cmyk string
		sourcearray 0 get exec

		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)
		% cmyk
		dup length 4 idiv string

		% roll off a copy of the gray string
		% cmyk gray
		dup 3 1 roll 
		
		% push the stuff proc that we want called by WalkCMYKString
		% gray cmyk gray
		/StuffCMYKIntoGrayString load exch

		% call the cmyk iterator
		% gray cmyk proc gray
		WalkCMYKString

		% return the gray string
		% gray
	end
} def

% ------------------------------------------------------
% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --ColorImageCompositeEmulator--
% ------------------------------------------------------

/ColorImageCompositeEmulator
{
	% Channelcount is already saved in Adobe_ColorImage_AI6_Vars. Our data is always in chunky form so punt if someone
	% calls colorimage on a level 1 device with planar data.
	% channelcount and multiplesources are already saved in Adobe_ColorImage_AI6_Vars. The image operator isn't going to use them.
	pop true eq
	{
		% pop off the parameters and return
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				% save off the original chunky source function
				sourcearray 0 3 -1 roll put
			
				% push the appropriate cover proc
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
			end
		} if
		image
	} ifelse
} def

% ------------------------------------------------------
% --SeparateCMYKImageProc-- string
% ------------------------------------------------------

/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin

		sourcecount 0 ne
		{
			% planar case: call the source proc for the current plate and return its result
			sourcearray plateindex get exec
		}
		{			
			% call the source proc to get the chunky cmyk string
			sourcearray 0 get exec
			
			% make a grayscale string of the same pixel count (ouch, pull me out of this loop)
			% cmyk
			dup length 4 idiv string
			
			% cmyk
			0 2 index
			
			% cmyk gray grayindex cmyk
			plateindex 4 2 index length 1 sub
			{
				% cmyk gray grayindex cmyk channelindex
				get 255 exch sub
				
				% cmyk gray grayindex grayvalue
				3 copy put pop 1 add
				
				% cmyk gray grayindex
				2 index
			} for

			% return the gray string
			% cmyk gray grayindex cmyk
			pop pop exch pop
		} ifelse
	end
} def
	
% ------------------------------------------------------
% s1 s2 s3 s4 c1 c2 c3 c4 --FourEqual--
% ------------------------------------------------------

/FourEqual
{
	% s1 s2 s3 s4 c1 c2 c3 c4
	4 index ne
	{
		pop pop pop false
	}
	{
		% s1 s2 s3 s4 c1 c2 c3
		4 index ne
		{
			pop pop false
		}
		{
			% s1 s2 s3 s4 c1 c2
			4 index ne
			{
				pop false
			}
			{
				% s1 s2 s3 s4 c1
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def

% ------------------------------------------------------
%  --TestPlateIndex-- plateindex
% ------------------------------------------------------

/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		% assume we're not separating
		/plateindex -1 def

		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore

			% cyan plate?
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				% magenta plate?
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					% yellow plate?
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						% black plate
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
	end
} def

% ------------------------------------------------------
% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --colorimage--
% ------------------------------------------------------

/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def

		% setup for following if statement
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
	end
	
	% is this not 1 or 8 bit?
	{
		% Call the original proc if the image is at a weird bit depth. This will display a composite if we're separating, but too bad.
		/_colorimage load null ne
		{
			% call the original (they probably punt if we're separating)
			_colorimage
		}
		{
			% pop off the parameters and return
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		% Call the saved colorimage operator if this an rgb, we're printing a composite or we're separating
		% an image to a custom plate. The last case assumes that the separation procs surrounding us
		% take care of punching out
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			% Call the colorimage emulator if we're printing to a level 1 device
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				% call image if this is a grayscale so that Quark doesn't die on custom plates
				dup 1 eq
				{
					pop pop image
				}
				{
					% draw to the null device if we're on a custom plate
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						% stolen from PhotoShop
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						% push the appropriate transfer proc (first case is negative
						% second case is positive) and call settransfer
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					% restore from the null device if necessary
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			% Are we separating a grayscale image?
			dup 1 eq
			{
				% let the surrounding separation procset handle the separation
				pop pop
				image
			}
			{
				% pop channelcount and multiplesources since they're not used by the image operator
				pop pop

				% Prepare to call the image operator with a cover proc
				Adobe_ColorImage_AI6_Vars begin
					% save off the source procs for our cover proc
					% width height bitsperpixel matrix firstsource...lastsource
					sourcecount -1 0
					{			
						% width height bitsperpixel matrix firstsource...lastsource index
						exch sourcearray 3 1 roll put
					} for

					/SeparateCMYKImageProc load
				end

				% bypass the separation procset since some applications don't handle chunky and the
				% old separator doesn't handle colorimage
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def

% ------------------------------------------------------
% --XI--
% ------------------------------------------------------

/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			% skip the %BeginBinary comment
			currentfile 128 string readline pop pop
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			% synch the PostScript fill with Illustrator's notion of the current fill
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
			
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			% call image if passed grayscale or bitmap data. Some applications
			% die if colorimage is called with gray data.
			XIChannelCount 1 eq
			{
				% Some applications refuse to separate a grayscale image to the black plate if
				% the currentgray is white. Hack around.
				
				gsave
				0 setgray
				
				image
				
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse

		grestore
	end
} def
	
end

%%EndProcSet

% ------------------------------------------------------
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
% ------------------------------------------------------

currentpacking true setpacking

% 71 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put

% paint operands
/_eo false def
/_lp /none def
/_pf
{
} def	% paint fill
/_ps
{
} def	% paint stroke
/_psf
{
} def	% paint string fill
/_pss
{
} def	% paint string stroke
/_pjsf
{
} def	% paint justified string fill
/_pjss
{
} def	% paint justified string stroke
/_pola 0 def
/_doClip 0 def

% paint operators
/cf currentflat def	% - cf flatness

% typography operands
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def	% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def	% y character spacing
/_cx 0 def	% x word spacing
/_cy 0 def	% y word spacing
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def

% typography operators
/Tx
{
} def
/Tj
{
} def

% compound path operators
/CRender
{
} def

% printing
/_AI3_savepage
{
} def

% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def

% pattern operands
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def

% discard variables (12 total)

/discardSave null def	% holds save used in discard loop
/buffer 256 string def	% line buffer string : assume 256 chars/line
/beginString null def	% begin delimiter
/endString null def	% end delimiter
/endStringLength null def	% holds buffer size for reading by byte technique
/layerCnt 1 def	% internal variables for discard loop
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def

% variable for doing clipping without rendering
/clipForward? false def

% end the vars dictionary
end
% =========================================


userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if

userdict /Adobe_Illustrator_AI5 get begin


% initialization
/initialize	% - initialize -
{
	% pushing main on the stack
	Adobe_Illustrator_AI5 dup begin

	% push the vars dictionary
	Adobe_Illustrator_AI5_vars begin

	% at this point the main and vars dictionaries
	% are in the state we wish them to be
	% on exit from the initialize call

	% bind the procedures in the discard dictionary
	discardDict
	{
		bind pop pop
	} forall

	% begin the nc dictionary
	dup /nc get begin

	% bind the procs in main
	{
		% added a test for type = operatortype so procedures like Ln can be defined as an alias for 'pop
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall

	% turn off 'nc
	end

	newpath

	% on exit we have main and vars on top of dict stack
} def

/terminate	% - terminate -
{
	end
	end
} def

% definition operators
/_	% - _ null
null def
/ddef	% key value ddef -
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput	% key value literal xput -
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
	end
} def
/npop	% integer npop -
{
	{
		pop
	} repeat
} def

% marking operators
/sw	% ax ay string sw x y
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj	% cx cy fillchar ax ay string swj x y
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss	% ax ay string matrix ss -
{
	4 1 roll
	{
		% matrix ax ay char 0 0 {proc} -
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss	% cx cy fillchar ax ay string matrix jss -
{
	4 1 roll
	{
		% cx cy fillchar matrix ax ay char 0 0 {proc} -   
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def

% path operators
/sp	% ax ay string sp -
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp	% cx cy fillchar ax ay string jsp -
{
	{
		% cx cy fillchar ax ay char 0 0 {proc} -
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def

% path construction operators
/pl	% x y pl x y
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def

/setstrokeadjust where
{
	pop true setstrokeadjust
	/c	% x1 y1 x2 y2 x3 y3 c -
	{
		curveto
	} def
	/C
	/c load def
	/v	% x2 y2 x3 y3 v -
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y	% x1 y1 x2 y2 y -
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l	% x y l -
	{
		lineto
	} def
	/L
	/l load def
	/m	% x y m -
	{
		moveto
	} def
}
{
	% else
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse

% graphic state operators
/d	% array phase d -
{
	setdash
} def
/cf
{
} def	% - cf flatness
/i	% flatness i -
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j	% linejoin j -
{
	setlinejoin
} def
/J	% linecap J -
{
	setlinecap
} def
/M	% miterlimit M -
{
	setmiterlimit
} def
/w	% linewidth w -
{
	setlinewidth
} def

% path painting operators
/XR	% flag XR -
{
	0 ne
	/_eo exch ddef
} def
/H	% - H -
{
} def
/h	% - h -
{
	closepath
} def
/N	% - N -
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n	% - n -
{
	N
} def
/F	% - F -
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f	% - f -
{
	closepath
	F
} def
/S	% - S -
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s	% - s -
{
	closepath
	S
} def
/B	% - B -
{
	_pola 0 eq
	{
		_doClip 1 eq	% F clears _doClip
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b	% - b -
{
	closepath
	B
} def
/W	% - W -
{
	/_doClip 1 ddef
} def
/*	% - [string] * -
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	% used to call newpath only if _polo was 0; now newpath is called unconditionally (bh 3/24/94)
	newpath
} def

% group operators
/u	% - u -
{
} def
/U	% - U -
{
} def
/q	% - q -
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q	% - Q -
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u	% - *u -
{
	_pola 1 add /_pola exch ddef
} def
/*U	% - *U -
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D	% polarized D -
{
	pop
} def
/*w	% - *w -
{
} def
/*W	% - *W -
{
} def

% place operators
/`	% matrix llx lly urx ury string ` -
{
	/_i save ddef

% * special case of clipping forward without rendering
	% use 'nulldevice if true
	clipForward?
	{
		nulldevice
	} if

	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~	% - ~ -
{
	end
	_i restore
} def

% color operators
/O	% flag O -
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R	% flag R -
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g	% gray g -
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G	% gray G -
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k	% cyan magenta yellow black k -
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K	% cyan magenta yellow black K -
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x	% cyan magenta yellow black name gray x -
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X	% cyan magenta yellow black name gray X -
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def

% locked object operator
/A	% value A -
{
	pop
} def

% annotate page operator
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def



% object tag operator
% joe holt November 20, 1994

% /name (value) XT
/XT {
	pop pop
} def


% begin layer PostScript implementation

% general purpose discard loop
% works on early level 1 (v.23, v.38) PostScript printers
% version 0.02 04/03/93
% Bill Woodruff

% constraints :

% if nested discards must be handled
% then the begin and end delimiting
% strings must be of equal length

% arguments

% #nestingFlag
% #nestingFlag = 0  				no nesting
% #nestingFlag = 1  				nesting

% non-nested case
% note : since the non-nested case is invoked
% after the ocurrence of a beginning string
% we only have to look for the ending string
% it is not necessary to specify a beginning string

% 0 (endString) 

% nested case

% (beginString) 1 (endString) 

% the discard procedure is defined in the main dictionary
% it turns the discard dictionary on to execute the discard function
/discard
{
	% test for version, hash a key
	% get and execute the discard procedure from dictionary
	% execute it in a stopped context so we can bail with 'stop
	% wrap it in a save so we don't have to reset variables
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
	end
	discardSave restore
} bind def

% build the discard dictionary which will contain only procedures
userdict /discardDict 7 dict dup begin
put

% pre 38 initialization
/pre38Initialize
{
	% used as buffer size for reading by byte technique	
	/endStringLength endString length store

	/newBuff buffer 0 endStringLength getinterval store	%	new buffer equal in length to end string
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	%	pointer to from 2nd to last char in new buffer
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store	%	pointer to last char in new buffer
} def

% for <=38	
/shiftBuffer
{
	% shift last chars of newBuff to start of newBuff
	newBuff 0 newBuffButFirst putinterval
	% new character into last byte of newBuff
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def

% discard procedures

% no nesting, older ps
0
{
	pre38Initialize
	mark
	% fill the buffer
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def

% nesting, older ps
1
{
	pre38Initialize

	/beginString exch store

	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse

			shiftBuffer
		} loop
	} if
} def

% no nesting, newer ps
2
{
	mark
	{
		% read a line : exit if end of file reached
		currentfile buffer readline not
		{
		stop
		} if

		% end of layer ?
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def

% nesting, newer ps
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		% read a line : exit if end of file reached
		currentfile buffer readline not
		{
		stop
		} if

		% start of layer ?
		dup beginString eq
		{
			% update layer counter
			pop /layerCnt dup load 1 add store
		}
		{
			% end of layer ?
			endString eq
			{
				% stop if we're not nested
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					% nested : decrement layer counter
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def

% end discard dictionary
end

% define the dictionary for clipping without rendering

userdict /clipRenderOff 15 dict dup begin
put

% flag for marking this dictionary as active
% so we can test in /` and wrap placed
% elements in nulldevice
% /clipForward? true def

% re-define rendering primitives to clip and newpath
% based on value of /_doClip flag
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall

% modify 'Tr so Tj and Tx are never set up by
% the calls to 'a0, 'e0, etc.
/Tr /pop load def

% special case of 'cshow ?
% is so, we'll have to overload toplevels
% /patternashow /patternawidthshow
% /patternashowstroke
% /patternawidthshowstroke
% /ss /jss /sp /jsp

% perhaps we can bracket out patterns at a higher level ?
% for example, by modifying 'E to pop off its parameters

% call to 'show in 'patternpath ?
% calls to 'ashow in '_psf ?
% calls to 'awidthshow in '_pjsf ?
% calls to 'widthshow in '_jss and '_jsp ?

% disable gradient operators
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def

% end dictionary for clipping without rendering
end

/Lb	% visible preview enabled printing dimmed masks colorIndex red green blue  ==> Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop

	% #masks #printing 

	% assume that
	% masks = 1 masks forward, masks = 0 no masking or only local masking	

	% do the right thing for printing and masking layer
	0 eq
	{
		% non-printing layer

		0 eq
		{
			% no masking forward from this layer
			% nested discard call
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			% masking forward from this layer
			% no printing, but clip path must survive
			
			% set the clipForward? flag in the vars dict
			/clipForward? true def
			
			% redefine Tx and Tj in the vars dict
			/Tx /pop load def
			/Tj /pop load def
			
			% turn on the no rendering dictionary
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		% printing layer

		% encapsulate layer with 'save
		% only if there is no masking forward

		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def

% end layer :
% assume that if discardSave is non-null
% then the layer was bracketed by 'save...restore
% else we must test for clipping forward
/LB	% ==> Lb ==> .....
{
	discardSave dup null ne
	{
		% undo the save
		restore
	}
	{
		pop

		clipForward?
		{
			% assume dictionary stack :

			%		vars			
			%		clipRenderOff			
			%		main

			currentdict
			end
			end
			begin

			% dictionary stack :

			%		vars			
			%		main
					
			/clipForward? false ddef

		} if
	} ifelse
} bind def

% begin palette discard
% assume no nesting
/Pb	% topLeftCell selected Pb -
{
	pop pop
	% non nested discard
	0 (%AI5_EndPalette) discard
} bind def

% other type of discard
% assume no nesting
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def

% express layer name
/Ln /pop load def	% ==> Ln ==> .....

% path center-point flag operator
/Ap	% value Ap -
/pop load def

% device-independent flatness
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def

% multi-layer clipping
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def

% null color operators
/nc 3 dict def
nc begin
/setgray	% gray setgray -
{
	pop
} bind def
/setcmykcolor	% cyan magenta yellow black setcmykcolor -
{
	4 npop
} bind def
/setcustomcolor	% object tint setcustomcolor -
{
	2 npop
} bind def
% exit 'nc dictionary
currentdict readonly pop
end

% exit main dictionary
% currentdict readonly pop
end
setpacking

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_level2_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Bird's Feet)
(Bird's Feet) 17 7.779 89 79.779 [
(0 O 0 R 1 g 1 G) @
_ &
(0 O 0 R 0 g 0 G) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
21.323 72.563 m
15.159 75.88 L
S
14.211 74.119 m
20.376 70.802 L
S
18.25 65.779 m
12.952 61.203 L
S
14.26 59.689 m
19.557 64.265 L
S
22.521 57.891 m
16.002 55.34 L
S
16.731 53.478 m
23.25 56.029 L
S
21.194 45.281 m
14.366 46.823 L
S
13.925 44.872 m
20.754 43.33 L
S
21.19 39.635 m
18.63 33.119 L
S
20.492 32.388 m
23.052 38.903 L
S
21.242 23.717 m
14.458 25.441 L
S
13.965 23.503 m
20.75 21.779 L
S
21.02 17.622 m
14.373 15.428 L
S
15 13.529 m
21.647 15.723 L
S
86.211 74.119 m
92.376 70.802 L
S
93.323 72.563 m
87.159 75.88 L
S
86.26 59.689 m
91.557 64.265 L
S
90.25 65.779 m
84.952 61.203 L
S
88.731 53.478 m
95.25 56.029 L
S
94.521 57.891 m
88.002 55.34 L
S
85.925 44.872 m
92.754 43.33 L
S
93.194 45.281 m
86.366 46.823 L
S
85.965 23.503 m
92.75 21.779 L
S
93.242 23.717 m
86.458 25.441 L
S
87 13.529 m
93.647 15.723 L
S
93.02 17.622 m
86.373 15.428 L
S
80.699 75.084 m
84.179 81.158 L
S
82.443 82.152 m
78.963 76.078 L
S
66 74.279 m
63.624 80.863 L
S
61.742 80.184 m
64.118 73.6 L
S
53.43 75.941 m
55.153 82.726 L
S
53.215 83.218 m
51.491 76.434 L
S
47.785 76.096 m
41.341 78.829 L
S
40.56 76.988 m
47.004 74.255 L
S
31.872 76.469 m
33.776 83.205 L
S
31.852 83.749 m
29.947 77.013 L
S
25.785 76.854 m
23.769 83.558 L
S
21.853 82.982 m
23.87 76.278 L
S
82.443 10.152 m
78.963 4.078 L
S
80.699 3.084 m
84.179 9.158 L
S
68.018 10.489 m
72.451 5.071 L
S
73.998 6.338 m
69.565 11.755 L
S
61.742 8.184 m
64.118 1.6 L
S
66 2.279 m
63.624 8.863 L
S
53.215 11.218 m
51.491 4.434 L
S
53.43 3.941 m
55.153 10.726 L
S
31.852 11.749 m
29.947 5.013 L
S
31.872 4.469 m
33.776 11.205 L
S
21.853 10.982 m
23.87 4.278 L
S
25.785 4.854 m
23.769 11.558 L
S
35.443 32.652 m
31.963 26.578 L
S
33.699 25.584 m
37.179 31.658 L
S
65.498 64.838 m
61.065 70.255 L
S
59.518 68.989 m
63.951 63.571 L
S
53.242 66.684 m
55.618 60.1 L
S
57.5 60.779 m
55.124 67.363 L
S
79.785 18.596 m
73.341 21.329 L
S
72.56 19.488 m
79.004 16.755 L
S
79.98 36.559 m
78.075 29.823 L
S
80 29.279 m
81.904 36.014 L
S
69.568 41.906 m
71.584 35.202 L
S
73.5 35.779 m
71.483 42.482 L
S
50.02 47.205 m
53.5 53.279 L
S
51.764 54.273 m
48.284 48.199 L
S
35.518 53.989 m
39.951 48.571 L
S
41.498 49.838 m
37.065 55.255 L
S
27.742 52.184 m
30.118 45.6 L
S
32 46.279 m
29.624 52.863 L
S
79.715 54.218 m
77.991 47.434 L
S
79.93 46.941 m
81.653 53.726 L
S
63.892 50.586 m
70.336 47.853 L
S
71.117 49.694 m
64.673 52.428 L
S
47.068 20.406 m
49.084 13.702 L
S
51 14.279 m
48.983 20.982 L
S
65.969 19.33 m
59.037 18.355 L
S
59.316 16.375 m
66.248 17.349 L
S
66.112 31.548 m
64.55 24.725 L
S
66.5 24.279 m
68.062 31.102 L
S
47.223 34.478 m
43.478 28.564 L
S
45.168 27.494 m
48.913 33.407 L
S
48.892 43.075 m
42.475 40.277 L
S
43.275 38.443 m
49.691 41.241 L
S
35.372 37.469 m
37.276 44.205 L
S
35.352 44.749 m
33.447 38.013 L
S
60.915 40.855 m
58.899 47.558 L
S
56.983 46.982 m
59 40.279 L
S
47.201 64.02 m
41.612 59.806 L
S
42.816 58.209 m
48.405 62.423 L
S
37.937 63.837 m
35.993 70.561 L
S
34.072 70.006 m
36.015 63.281 L
S
27.396 70.357 m
26.989 63.369 L
S
28.986 63.252 m
29.393 70.241 L
S
40.25 22.502 m
35.996 16.943 L
S
37.584 15.727 m
41.839 21.286 L
S
32.456 18.091 m
27.607 23.139 L
S
26.165 21.754 m
31.014 16.705 L
S
72.5 55.279 m
76.901 60.722 L
S
75.346 61.979 m
70.944 56.536 L
S
75.529 65.445 m
76.313 72.401 L
S
74.326 72.625 m
73.542 65.669 L
S
52.56 30.488 m
59.004 27.755 L
S
59.785 29.596 m
53.341 32.329 L
S
68.018 82.489 m
72.451 77.071 L
S
73.998 78.338 m
69.565 83.755 L
S
7.498 64.838 m
3.065 70.255 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Blue Dots-Transparent)
(Blue Dots-Transparent) 3.88 3.88 32.68 32.68 [
%AI3_Tile
(0 O 0 R 1 0.7 0 0 k 1 0.7 0 0 K) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.5 w 4 M []0 d
%AI3_Note:
0 D
32.68 1 m
34.27 1 35.56 2.29 35.56 3.88 c
35.56 5.471 34.27 6.76 32.68 6.76 c
31.089 6.76 29.8 5.471 29.8 3.88 c
29.8 2.29 31.089 1 32.68 1 c
f
18.28 1 m
19.87 1 21.16 2.29 21.16 3.88 c
21.16 5.471 19.87 6.76 18.28 6.76 c
16.689 6.76 15.4 5.471 15.4 3.88 c
15.4 2.29 16.689 1 18.28 1 c
f
3.88 1 m
5.47 1 6.76 2.29 6.76 3.88 c
6.76 5.471 5.47 6.76 3.88 6.76 c
2.29 6.76 1 5.471 1 3.88 c
1 2.29 2.29 1 3.88 1 c
f
32.68 15.4 m
34.27 15.4 35.56 16.69 35.56 18.28 c
35.56 19.871 34.27 21.16 32.68 21.16 c
31.089 21.16 29.8 19.871 29.8 18.28 c
29.8 16.69 31.089 15.4 32.68 15.4 c
f
18.28 15.4 m
19.87 15.4 21.16 16.69 21.16 18.28 c
21.16 19.871 19.87 21.16 18.28 21.16 c
16.689 21.16 15.4 19.871 15.4 18.28 c
15.4 16.69 16.689 15.4 18.28 15.4 c
f
3.88 15.4 m
5.47 15.4 6.76 16.69 6.76 18.28 c
6.76 19.871 5.47 21.16 3.88 21.16 c
2.29 21.16 1 19.871 1 18.28 c
1 16.69 2.29 15.4 3.88 15.4 c
f
32.68 29.8 m
34.27 29.8 35.56 31.09 35.56 32.68 c
35.56 34.271 34.27 35.56 32.68 35.56 c
31.089 35.56 29.8 34.271 29.8 32.68 c
29.8 31.09 31.089 29.8 32.68 29.8 c
f
18.28 29.8 m
19.87 29.8 21.16 31.09 21.16 32.68 c
21.16 34.271 19.87 35.56 18.28 35.56 c
16.689 35.56 15.4 34.271 15.4 32.68 c
15.4 31.09 16.689 29.8 18.28 29.8 c
f
3.88 29.8 m
5.47 29.8 6.76 31.09 6.76 32.68 c
6.76 34.271 5.47 35.56 3.88 35.56 c
2.29 35.56 1 34.271 1 32.68 c
1 31.09 2.29 29.8 3.88 29.8 c
f
11.08 8.2 m
12.67 8.2 13.96 9.49 13.96 11.08 c
13.96 12.671 12.67 13.96 11.08 13.96 c
9.489 13.96 8.2 12.671 8.2 11.08 c
8.2 9.49 9.489 8.2 11.08 8.2 c
f
25.48 8.2 m
27.07 8.2 28.36 9.49 28.36 11.08 c
28.36 12.671 27.07 13.96 25.48 13.96 c
23.889 13.96 22.6 12.671 22.6 11.08 c
22.6 9.49 23.889 8.2 25.48 8.2 c
f
11.08 22.6 m
12.67 22.6 13.96 23.89 13.96 25.48 c
13.96 27.071 12.67 28.36 11.08 28.36 c
9.489 28.36 8.2 27.071 8.2 25.48 c
8.2 23.89 9.489 22.6 11.08 22.6 c
f
25.48 22.6 m
27.07 22.6 28.36 23.89 28.36 25.48 c
28.36 27.071 27.07 28.36 25.48 28.36 c
23.889 28.36 22.6 27.071 22.6 25.48 c
22.6 23.89 23.889 22.6 25.48 22.6 c
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Bricks)
(Bricks) 2.565 5.19 74.565 77.19 [
(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @
_ &
(0 O 0 R 1 g 1 G) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
1.6 73.6 m
75.6 73.6 l
S
1.6 66.399 m
75.6 66.399 L
S
1.6 59.199 m
75.6 59.199 L
S
1.6 51.998 m
75.6 51.998 L
S
1.6 44.798 m
75.6 44.798 L
S
1.6 37.597 m
75.6 37.597 L
S
1.6 30.397 m
75.6 30.397 L
S
1.6 23.196 m
75.6 23.196 L
S
1.6 15.996 m
75.6 15.996 L
S
1.6 8.796 m
75.6 8.796 L
S
70.975 73.6 m
70.975 66.412 l
S
56.575 73.6 m
56.575 66.412 L
S
42.175 73.6 m
42.175 66.412 L
S
27.775 73.6 m
27.775 66.412 L
S
13.375 73.6 m
13.375 66.412 L
S
70.975 59.162 m
70.975 51.975 l
S
56.575 59.162 m
56.575 51.975 L
S
42.175 59.162 m
42.175 51.975 L
S
27.775 59.162 m
27.775 51.975 L
S
13.375 59.162 m
13.375 51.975 L
S
70.975 44.787 m
70.975 37.6 l
S
56.575 44.787 m
56.575 37.6 L
S
42.175 44.787 m
42.175 37.6 L
S
27.775 44.787 m
27.775 37.6 L
S
13.375 44.787 m
13.375 37.6 L
S
70.975 30.412 m
70.975 23.225 l
S
56.575 30.412 m
56.575 23.225 L
S
42.175 30.412 m
42.175 23.225 L
S
27.775 30.412 m
27.775 23.225 L
S
13.375 30.412 m
13.375 23.225 L
S
70.975 15.975 m
70.975 8.787 l
S
56.575 15.975 m
56.575 8.787 L
S
42.175 15.975 m
42.175 8.787 L
S
27.775 15.975 m
27.775 8.787 L
S
13.375 15.975 m
13.375 8.787 L
S
63.762 8.787 m
63.762 1.6 L
S
49.362 8.787 m
49.362 1.6 L
S
34.962 8.787 m
34.962 1.6 L
S
20.562 8.787 m
20.562 1.6 L
S
6.162 8.787 m
6.162 1.6 l
S
63.762 23.225 m
63.762 16.037 L
S
49.362 23.225 m
49.362 16.037 L
S
34.962 23.225 m
34.962 16.037 L
S
20.562 23.225 m
20.562 16.037 L
S
6.162 23.225 m
6.162 16.037 l
S
63.762 37.6 m
63.762 30.412 L
S
49.362 37.6 m
49.362 30.412 L
S
20.562 37.6 m
20.562 30.412 L
S
6.162 37.6 m
6.162 30.412 l
S
63.762 51.975 m
63.762 44.787 L
S
49.362 51.975 m
49.362 44.787 L
S
34.962 51.975 m
34.962 44.787 L
S
20.562 51.975 m
20.562 44.787 L
S
6.162 51.975 m
6.162 44.787 l
S
63.762 66.412 m
63.762 59.225 L
S
49.362 66.412 m
49.362 59.225 L
S
34.962 66.412 m
34.962 59.225 L
S
20.562 66.412 m
20.562 59.225 L
S
6.162 66.412 m
6.162 59.225 l
S
63.762 80.849 m
63.762 73.662 L
S
49.362 80.849 m
49.362 73.662 L
S
34.962 80.849 m
34.962 73.662 L
S
20.562 80.849 m
20.562 73.662 L
S
6.162 80.849 m
6.162 73.662 l
S
34.962 37.6 m
34.962 30.412 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
(0 O 0 R 1 g 1 G) @
_ &
(0 O 0 R 0 g 0 G) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Cross Texture)
(Cross Texture) 1 1 58.6 58.6 [
(0 O 0 R 1 1 0.2 0 k 1 1 0.2 0 K) @
_ &
(0 O 0 R 1 g 1 G) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
53.5 55 m
56.5 55 l
S
39.1 55 m
42.1 55 l
S
24.7 55 m
27.7 55 l
S
10.3 55 m
13.3 55 l
S
46.3 47.8 m
49.3 47.8 l
S
31.9 47.8 m
34.9 47.8 l
S
17.5 47.8 m
20.5 47.8 l
S
3.1 47.8 m
6.1 47.8 l
S
53.5 40.6 m
56.5 40.6 l
S
39.1 40.6 m
42.1 40.6 l
S
24.7 40.6 m
27.7 40.6 l
S
10.3 40.6 m
13.3 40.6 l
S
46.3 33.4 m
49.3 33.4 l
S
31.9 33.4 m
34.9 33.4 l
S
17.5 33.4 m
20.5 33.4 l
S
3.1 33.4 m
6.1 33.4 l
S
53.5 26.2 m
56.5 26.2 l
S
39.1 26.2 m
42.1 26.2 l
S
24.7 26.2 m
27.7 26.2 l
S
10.3 26.2 m
13.3 26.2 l
S
46.3 19 m
49.3 19 l
S
31.9 19 m
34.9 19 l
S
17.5 19 m
20.5 19 l
S
3.1 19 m
6.1 19 l
S
53.5 11.8 m
56.5 11.8 l
S
39.1 11.8 m
42.1 11.8 l
S
24.7 11.8 m
27.7 11.8 l
S
10.3 11.8 m
13.3 11.8 l
S
46.3 4.6 m
49.3 4.6 l
S
31.9 4.6 m
34.9 4.6 l
S
17.5 4.6 m
20.5 4.6 l
S
3.1 4.6 m
6.1 4.6 l
S
55 56.5 m
55 53.5 l
S
40.6 56.5 m
40.6 53.5 l
S
26.2 56.5 m
26.2 53.5 l
S
11.8 56.5 m
11.8 53.5 l
S
47.8 49.3 m
47.8 46.3 l
S
33.4 49.3 m
33.4 46.3 l
S
19 49.3 m
19 46.3 l
S
4.6 49.3 m
4.6 46.3 l
S
55 42.1 m
55 39.1 l
S
40.6 42.1 m
40.6 39.1 l
S
26.2 42.1 m
26.2 39.1 l
S
11.8 42.1 m
11.8 39.1 l
S
47.8 34.9 m
47.8 31.9 l
S
33.4 34.9 m
33.4 31.9 l
S
19 34.9 m
19 31.9 l
S
4.6 34.9 m
4.6 31.9 l
S
55 27.7 m
55 24.7 l
S
40.6 27.7 m
40.6 24.7 l
S
26.2 27.7 m
26.2 24.7 l
S
11.8 27.7 m
11.8 24.7 l
S
47.8 20.5 m
47.8 17.5 l
S
33.4 20.5 m
33.4 17.5 l
S
19 20.5 m
19 17.5 l
S
4.6 20.5 m
4.6 17.5 l
S
55 13.3 m
55 10.3 l
S
40.6 13.3 m
40.6 10.3 l
S
26.2 13.3 m
26.2 10.3 l
S
11.8 13.3 m
11.8 10.3 l
S
47.8 6.1 m
47.8 3.1 l
S
33.4 6.1 m
33.4 3.1 l
S
19 6.1 m
19 3.1 l
S
4.6 6.1 m
4.6 3.1 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Parquet Floor)
(Parquet Floor) 3.85 3.85 75.85 75.85 [
(0 O 0 R 0.26 0.497 0.75 0 k 0.26 0.497 0.75 0 K) @
_ &
(0 O 0 R 0 g 0 G) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
37.6 6.1 m
37.6 10.598 L
19.6 10.598 L
19.6 6.1 L
37.6 6.1 L
s
73.6 6.1 m
73.6 10.598 L
55.6 10.598 L
55.6 6.1 L
73.6 6.1 L
s
19.6 24.1 m
19.6 28.598 L
1.6 28.598 L
1.6 24.1 L
19.6 24.1 L
s
55.6 24.1 m
55.6 28.598 L
37.6 28.598 L
37.6 24.1 L
55.6 24.1 L
s
82.6 24.1 m
82.6 28.598 L
73.6 28.598 L
73.6 24.1 L
82.6 24.1 L
s
37.6 42.1 m
37.6 46.598 L
19.6 46.598 L
19.6 42.1 L
37.6 42.1 L
s
73.6 42.1 m
73.6 46.598 L
55.6 46.598 L
55.6 42.1 L
73.6 42.1 L
s
19.6 60.1 m
19.6 64.598 L
1.6 64.598 L
1.6 60.1 L
19.6 60.1 L
s
55.6 60.1 m
55.6 64.598 L
37.6 64.598 L
37.6 60.1 L
55.6 60.1 L
s
82.6 60.1 m
82.6 64.598 L
73.6 64.598 L
73.6 60.1 L
82.6 60.1 L
s
37.6 15.098 m
37.6 19.598 L
19.6 19.598 L
19.6 15.098 L
37.6 15.098 L
s
73.6 15.098 m
73.6 19.598 L
55.6 19.598 L
55.6 15.098 L
73.6 15.098 L
s
19.6 33.098 m
19.6 37.598 L
1.6 37.598 L
1.6 33.098 L
19.6 33.098 L
s
55.6 33.098 m
55.6 37.598 L
37.6 37.598 L
37.6 33.098 L
55.6 33.098 L
s
82.6 33.098 m
82.6 37.598 L
73.6 37.598 L
73.6 33.098 L
82.6 33.098 L
s
37.6 51.098 m
37.6 55.598 L
19.6 55.598 L
19.6 51.098 L
37.6 51.098 L
s
73.6 51.098 m
73.6 55.598 L
55.6 55.598 L
55.6 51.098 L
73.6 51.098 L
s
19.6 69.098 m
19.6 73.598 L
1.6 73.598 L
1.6 69.098 L
19.6 69.098 L
s
55.6 69.098 m
55.6 73.598 L
37.6 73.598 L
37.6 69.098 L
55.6 69.098 L
s
82.6 69.098 m
82.6 73.598 L
73.6 73.598 L
73.6 69.098 L
82.6 69.098 L
s
15.1 19.598 m
10.6 19.598 L
10.6 1.6 L
15.1 1.6 L
15.1 19.598 L
s
51.1 19.598 m
46.6 19.598 L
46.6 1.6 L
51.1 1.6 L
51.1 19.598 L
s
33.1 37.598 m
28.6 37.598 L
28.6 19.6 L
33.1 19.6 L
33.1 37.598 L
s
69.1 37.598 m
64.6 37.598 L
64.6 19.6 L
69.1 19.6 L
69.1 37.598 L
s
15.1 55.598 m
10.6 55.598 L
10.6 37.6 L
15.1 37.6 L
15.1 55.598 L
s
51.1 55.598 m
46.6 55.598 L
46.6 37.6 L
51.1 37.6 L
51.1 55.598 L
s
33.1 73.598 m
28.6 73.598 L
28.6 55.6 L
33.1 55.6 L
33.1 73.598 L
s
69.1 73.598 m
64.6 73.598 L
64.6 55.6 L
69.1 55.6 L
69.1 73.598 L
s
15.1 82.598 m
10.6 82.598 L
10.6 73.6 L
15.1 73.6 L
15.1 82.598 L
s
51.1 82.598 m
46.6 82.598 L
46.6 73.6 L
51.1 73.6 L
51.1 82.598 L
s
19.6 19.598 m
15.1 19.598 L
15.1 1.6 L
19.6 1.6 L
19.6 19.598 L
s
55.6 19.598 m
51.1 19.598 L
51.1 1.6 L
55.6 1.6 L
55.6 19.598 L
s
37.6 37.598 m
33.1 37.598 L
33.1 19.6 L
37.6 19.6 L
37.6 37.598 L
s
73.6 37.598 m
69.1 37.598 L
69.1 19.6 L
73.6 19.6 L
73.6 37.598 L
s
19.6 55.598 m
15.1 55.598 L
15.1 37.6 L
19.6 37.6 L
19.6 55.598 L
s
55.6 55.598 m
51.1 55.598 L
51.1 37.6 L
55.6 37.6 L
55.6 55.598 L
s
37.6 73.598 m
33.1 73.598 L
33.1 55.6 L
37.6 55.6 L
37.6 73.598 L
s
73.6 73.598 m
69.1 73.598 L
69.1 55.6 L
73.6 55.6 L
73.6 73.598 L
s
19.6 82.598 m
15.1 82.598 L
15.1 73.6 L
19.6 73.6 L
19.6 82.598 L
s
55.6 82.598 m
51.1 82.598 L
51.1 73.6 L
55.6 73.6 L
55.6 82.598 L
s
6.1 19.598 m
1.6 19.598 L
1.6 1.6 L
6.1 1.6 L
6.1 19.598 L
s
42.1 19.598 m
37.6 19.598 L
37.6 1.6 L
42.1 1.6 L
42.1 19.598 L
s
78.1 19.598 m
73.6 19.598 L
73.6 1.6 L
78.1 1.6 L
78.1 19.598 L
s
24.1 37.598 m
19.6 37.598 L
19.6 19.6 L
24.1 19.6 L
24.1 37.598 L
s
60.1 37.598 m
55.6 37.598 L
55.6 19.6 L
60.1 19.6 L
60.1 37.598 L
s
6.1 55.598 m
1.6 55.598 L
1.6 37.6 L
6.1 37.6 L
6.1 55.598 L
s
42.1 55.598 m
37.6 55.598 L
37.6 37.6 L
42.1 37.6 L
42.1 55.598 L
s
78.1 55.598 m
73.6 55.598 L
73.6 37.6 L
78.1 37.6 L
78.1 55.598 L
s
24.1 73.598 m
19.6 73.598 L
19.6 55.6 L
24.1 55.6 L
24.1 73.598 L
s
60.1 73.598 m
55.6 73.598 L
55.6 55.6 L
60.1 55.6 L
60.1 73.598 L
s
6.1 82.598 m
1.6 82.598 L
1.6 73.6 L
6.1 73.6 L
6.1 82.598 L
s
42.1 82.598 m
37.6 82.598 L
37.6 73.6 L
42.1 73.6 L
42.1 82.598 L
s
78.1 82.598 m
73.6 82.598 L
73.6 73.6 L
78.1 73.6 L
78.1 82.598 L
s
37.6 1.6 m
37.6 6.098 L
19.6 6.098 L
19.6 1.6 L
37.6 1.6 L
s
73.6 1.6 m
73.6 6.098 L
55.6 6.098 L
55.6 1.6 L
73.6 1.6 L
s
19.6 19.6 m
19.6 24.098 L
1.6 24.098 L
1.6 19.6 L
19.6 19.6 L
s
55.6 19.6 m
55.6 24.098 L
37.6 24.098 L
37.6 19.6 L
55.6 19.6 L
s
82.6 19.6 m
82.6 24.098 L
73.6 24.098 L
73.6 19.6 L
82.6 19.6 L
s
37.6 37.6 m
37.6 42.098 L
19.6 42.098 L
19.6 37.6 L
37.6 37.6 L
s
73.6 37.6 m
73.6 42.098 L
55.6 42.098 L
55.6 37.6 L
73.6 37.6 L
s
19.6 55.6 m
19.6 60.098 L
1.6 60.098 L
1.6 55.6 L
19.6 55.6 L
s
55.6 55.6 m
55.6 60.098 L
37.6 60.098 L
37.6 55.6 L
55.6 55.6 L
s
82.6 55.6 m
82.6 60.098 L
73.6 60.098 L
73.6 55.6 L
82.6 55.6 L
s
37.6 73.6 m
37.6 78.098 L
19.6 78.098 L
19.6 73.6 L
37.6 73.6 L
s
73.6 73.6 m
73.6 78.098 L
55.6 78.098 L
55.6 73.6 L
73.6 73.6 L
s
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Scales)
(Scales) 1.6 9.3475 48.088 55.8355 [
(0 O 0 R 1 g 1 G) @
_ &
(0 O 0 R 0 g 0 G) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
17.0956 9.3475 m
12.8162 9.3475 9.3475 5.8787 9.3475 1.6 C
9.3475 5.8787 5.8787 9.3475 1.6 9.3475 C
1.6 13.6262 5.0687 17.095 9.3475 17.095 c
13.6268 17.095 17.0956 13.6262 17.0956 9.3475 C
s
32.5918 9.3475 m
28.3125 9.3475 24.8437 5.8787 24.8437 1.6 C
24.8437 5.8787 21.3743 9.3475 17.0956 9.3475 C
17.0956 13.6262 20.5644 17.095 24.8437 17.095 c
29.1224 17.095 32.5918 13.6262 32.5918 9.3475 C
s
48.088 9.3475 m
43.8087 9.3475 40.3399 5.8787 40.3399 1.6 C
40.3399 5.8787 36.8705 9.3475 32.5918 9.3475 C
32.5918 13.6262 36.0606 17.095 40.3399 17.095 c
44.6186 17.095 48.088 13.6262 48.088 9.3475 C
s
17.0956 40.3393 m
12.8162 40.3393 9.3475 36.8699 9.3475 32.5912 C
9.3475 36.8699 5.8787 40.3393 1.6 40.3393 C
1.6 44.6181 5.0687 48.0874 9.3475 48.0874 c
13.6268 48.0874 17.0956 44.6181 17.0956 40.3393 C
s
17.0956 24.8431 m
12.8162 24.8431 9.3475 21.3743 9.3475 17.095 C
9.3475 21.3743 5.8787 24.8431 1.6 24.8431 C
1.6 29.1218 5.0687 32.5912 9.3475 32.5912 c
13.6268 32.5912 17.0956 29.1218 17.0956 24.8431 C
s
32.5918 24.8431 m
28.3125 24.8431 24.8437 21.3743 24.8437 17.095 C
24.8437 21.3743 21.3743 24.8431 17.0956 24.8431 C
17.0956 29.1218 20.5644 32.5912 24.8437 32.5912 c
29.1224 32.5912 32.5918 29.1218 32.5918 24.8431 C
s
48.088 24.8431 m
43.8087 24.8431 40.3399 21.3743 40.3399 17.095 C
40.3399 21.3743 36.8705 24.8431 32.5918 24.8431 C
32.5918 29.1218 36.0606 32.5912 40.3399 32.5912 c
44.6186 32.5912 48.088 29.1218 48.088 24.8431 C
s
32.5918 40.3393 m
28.3125 40.3393 24.8437 36.8699 24.8437 32.5912 C
24.8437 36.8699 21.3743 40.3393 17.0956 40.3393 C
17.0956 44.6181 20.5644 48.0874 24.8437 48.0874 c
29.1224 48.0874 32.5918 44.6181 32.5918 40.3393 C
s
48.088 40.3393 m
43.8087 40.3393 40.3399 36.8699 40.3399 32.5912 C
40.3399 36.8699 36.8705 40.3393 32.5918 40.3393 C
32.5918 44.6181 36.0606 48.0874 40.3399 48.0874 c
44.6186 48.0874 48.088 44.6181 48.088 40.3393 C
s
17.0956 55.8355 m
12.8162 55.8355 9.3475 52.3662 9.3475 48.0874 C
9.3475 52.3662 5.8787 55.8355 1.6 55.8355 C
1.6 60.1143 5.0687 63.5836 9.3475 63.5836 c
13.6268 63.5836 17.0956 60.1143 17.0956 55.8355 C
s
32.5918 55.8355 m
28.3125 55.8355 24.8437 52.3662 24.8437 48.0874 C
24.8437 52.3662 21.3743 55.8355 17.0956 55.8355 C
17.0956 60.1143 20.5644 63.5836 24.8437 63.5836 c
29.1224 63.5836 32.5918 60.1143 32.5918 55.8355 C
s
48.088 55.8355 m
43.8087 55.8355 40.3399 52.3662 40.3399 48.0874 C
40.3399 52.3662 36.8705 55.8355 32.5918 55.8355 C
32.5918 60.1143 36.0606 63.5836 40.3399 63.5836 c
44.6186 63.5836 48.088 60.1143 48.088 55.8355 C
s
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Table Cloth)
(Table Cloth) 5 5 77 77 [
(0 O 0 R 1 g 1 G) @
_ &
(0 O 0 R 0 0.4 0.4 0 k 0 0.4 0.4 0 K) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.5 w 4 M []0 d
%AI3_Note:
0 D
80 37 m
80 45 L
2 45 L
2 37 L
80 37 L
f
80 55 m
80 63 L
2 63 L
2 55 L
80 55 L
f
80.6667 73 m
80.6667 81 L
2.6667 81 L
2.6667 73 L
80.6667 73 L
f
80 19 m
80 27 L
2 27 L
2 19 L
80 19 L
f
80 1 m
80 9 L
2 9 L
2 1 L
80 1 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.6 0.6 0 k 0 0.6 0.6 0 K) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.5 w 4 M []0 d
%AI3_Note:
0 D
37 2 m
45 2 L
45 80 L
37 80 L
37 2 L
f
55 2 m
63 2 L
63 80 L
55 80 L
55 2 L
f
73 2 m
81 2 L
81 80 L
73 80 L
73 2 L
f
19 2 m
27 2 L
27 80 L
19 80 L
19 2 L
f
1 2 m
9 2 L
9 80 L
1 80 L
1 2 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 1 1 0 k 0 1 1 0 K) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.5 w 4 M []0 d
%AI3_Note:
0 D
9 73 m
9 81 L
1 81 L
1 73 L
9 73 L
f
27 73 m
27 81 L
19 81 L
19 73 L
27 73 L
f
45 73 m
45 81 L
37 81 L
37 73 L
45 73 L
f
63 73 m
63 81 L
55 81 L
55 73 L
63 73 L
f
81 73 m
81 81 L
73 81 L
73 73 L
81 73 L
f
9 55 m
9 63 L
1 63 L
1 55 L
9 55 L
f
27 55 m
27 63 L
19 63 L
19 55 L
27 55 L
f
45 55 m
45 63 L
37 63 L
37 55 L
45 55 L
f
63 55 m
63 63 L
55 63 L
55 55 L
63 55 L
f
81 55 m
81 63 L
73 63 L
73 55 L
81 55 L
f
9 37 m
9 45 L
1 45 L
1 37 L
9 37 L
f
27 37 m
27 45 L
19 45 L
19 37 L
27 37 L
f
45 37 m
45 45 L
37 45 L
37 37 L
45 37 L
f
63 37 m
63 45 L
55 45 L
55 37 L
63 37 L
f
81 37 m
81 45 L
73 45 L
73 37 L
81 37 L
f
9 19 m
9 27 L
1 27 L
1 19 L
9 19 L
f
27 19 m
27 27 L
19 27 L
19 19 L
27 19 L
f
45 19 m
45 27 L
37 27 L
37 19 L
45 19 L
f
63 19 m
63 27 L
55 27 L
55 19 L
63 19 L
f
81 19 m
81 27 L
73 27 L
73 19 L
81 19 L
f
9 1 m
9 9 L
1 9 L
1 1 L
9 1 L
f
27 1 m
27 9 L
19 9 L
19 1 L
27 1 L
f
45 1 m
45 9 L
37 9 L
37 1 L
45 1 L
f
63 1 m
63 9 L
55 9 L
55 1 L
63 1 L
f
81 1 m
81 9 L
73 9 L
73 1 L
81 1 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Three Petals)
(Three Petals) 2.912 1.792 98.912 73.792 [
(0 O 0 R 0 g 0 G) @
_ &
(0 O 0 R 1 g 1 G) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.5 w 4 M []0 d
%AI3_Note:
0 D
2.912 25.792 m
4.825 28.68 3.325 29.705 2.912 29.705 c
2.5 29.705 1 28.68 2.912 25.792 C
f
50.912 25.792 m
52.825 28.68 51.325 29.705 50.912 29.705 c
50.5 29.705 49 28.68 50.912 25.792 C
f
50.912 1.792 m
52.825 4.68 51.325 5.705 50.912 5.705 c
50.5 5.705 49 4.68 50.912 1.792 C
f
2.912 1.792 m
4.825 4.68 3.325 5.705 2.912 5.705 c
2.5 5.705 1 4.68 2.912 1.792 C
f
26.912 13.792 m
28.825 16.68 27.325 17.705 26.912 17.705 c
26.5 17.705 25 16.68 26.912 13.792 C
f
98.912 25.792 m
100.825 28.68 99.325 29.705 98.912 29.705 c
98.5 29.705 97 28.68 98.912 25.792 C
f
98.912 1.792 m
100.825 4.68 99.325 5.705 98.912 5.705 c
98.5 5.705 97 4.68 98.912 1.792 C
f
74.912 13.792 m
76.825 16.68 75.325 17.705 74.912 17.705 c
74.5 17.705 73 16.68 74.912 13.792 C
f
2.912 49.792 m
4.825 52.68 3.325 53.705 2.912 53.705 c
2.5 53.705 1 52.68 2.912 49.792 C
f
50.912 49.792 m
52.825 52.68 51.325 53.705 50.912 53.705 c
50.5 53.705 49 52.68 50.912 49.792 C
f
26.912 37.792 m
28.825 40.68 27.325 41.705 26.912 41.705 c
26.5 41.705 25 40.68 26.912 37.792 C
f
98.912 49.792 m
100.825 52.68 99.325 53.705 98.912 53.705 c
98.5 53.705 97 52.68 98.912 49.792 C
f
74.912 37.792 m
76.825 40.68 75.325 41.705 74.912 41.705 c
74.5 41.705 73 40.68 74.912 37.792 C
f
2.912 73.792 m
4.825 76.68 3.325 77.705 2.912 77.705 c
2.5 77.705 1 76.68 2.912 73.792 C
f
50.912 73.792 m
52.825 76.68 51.325 77.705 50.912 77.705 c
50.5 77.705 49 76.68 50.912 73.792 C
f
26.912 61.792 m
28.825 64.68 27.325 65.705 26.912 65.705 c
26.5 65.705 25 64.68 26.912 61.792 C
f
98.912 73.792 m
100.825 76.68 99.325 77.705 98.912 77.705 c
98.5 77.705 97 76.68 98.912 73.792 C
f
74.912 61.792 m
76.825 64.68 75.325 65.705 74.912 65.705 c
74.5 65.705 73 64.68 74.912 61.792 C
f
3.949 25.197 m
7.407 25 7.536 26.812 7.329 27.169 c
7.121 27.525 5.479 28.304 3.949 25.197 C
f
51.949 25.197 m
55.407 25 55.536 26.812 55.329 27.169 c
55.121 27.525 53.479 28.304 51.949 25.197 C
f
51.949 1.197 m
55.407 1 55.536 2.812 55.329 3.169 c
55.121 3.525 53.479 4.304 51.949 1.197 C
f
3.949 1.197 m
7.407 1 7.536 2.812 7.329 3.169 c
7.121 3.525 5.479 4.304 3.949 1.197 C
f
27.949 13.197 m
31.407 13 31.536 14.812 31.329 15.169 c
31.121 15.525 29.479 16.304 27.949 13.197 C
f
75.949 13.197 m
79.407 13 79.536 14.812 79.329 15.169 c
79.121 15.525 77.479 16.304 75.949 13.197 C
f
3.949 49.197 m
7.407 49 7.536 50.812 7.329 51.169 c
7.121 51.525 5.479 52.304 3.949 49.197 C
f
51.949 49.197 m
55.407 49 55.536 50.812 55.329 51.169 c
55.121 51.525 53.479 52.304 51.949 49.197 C
f
27.949 37.197 m
31.407 37 31.536 38.812 31.329 39.169 c
31.121 39.525 29.479 40.304 27.949 37.197 C
f
75.949 37.197 m
79.407 37 79.536 38.812 79.329 39.169 c
79.121 39.525 77.479 40.304 75.949 37.197 C
f
3.949 73.197 m
7.407 73 7.536 74.812 7.329 75.169 c
7.121 75.525 5.479 76.304 3.949 73.197 C
f
51.949 73.197 m
55.407 73 55.536 74.812 55.329 75.169 c
55.121 75.525 53.479 76.304 51.949 73.197 C
f
27.949 61.197 m
31.407 61 31.536 62.812 31.329 63.169 c
31.121 63.525 29.479 64.304 27.949 61.197 C
f
75.949 61.197 m
79.407 61 79.536 62.812 79.329 63.169 c
79.121 63.525 77.479 64.304 75.949 61.197 C
f
49.876 25.197 m
48.345 28.304 46.704 27.525 46.496 27.169 c
46.288 26.812 46.418 25 49.876 25.197 C
f
49.876 1.197 m
48.345 4.304 46.704 3.525 46.496 3.169 c
46.288 2.812 46.418 1 49.876 1.197 C
f
25.876 13.197 m
24.345 16.304 22.704 15.525 22.496 15.169 c
22.288 14.812 22.418 13 25.876 13.197 C
f
97.876 25.197 m
96.345 28.304 94.704 27.525 94.496 27.169 c
94.288 26.812 94.418 25 97.876 25.197 C
f
97.876 1.197 m
96.345 4.304 94.704 3.525 94.496 3.169 c
94.288 2.812 94.418 1 97.876 1.197 C
f
73.876 13.197 m
72.345 16.304 70.704 15.525 70.496 15.169 c
70.288 14.812 70.418 13 73.876 13.197 C
f
49.876 49.197 m
48.345 52.304 46.704 51.525 46.496 51.169 c
46.288 50.812 46.418 49 49.876 49.197 C
f
25.876 37.197 m
24.345 40.304 22.704 39.525 22.496 39.169 c
22.288 38.812 22.418 37 25.876 37.197 C
f
97.876 49.197 m
96.345 52.304 94.704 51.525 94.496 51.169 c
94.288 50.812 94.418 49 97.876 49.197 C
f
73.876 37.197 m
72.345 40.304 70.704 39.525 70.496 39.169 c
70.288 38.812 70.418 37 73.876 37.197 C
f
49.876 73.197 m
48.345 76.304 46.704 75.525 46.496 75.169 c
46.288 74.812 46.418 73 49.876 73.197 C
f
25.876 61.197 m
24.345 64.304 22.704 63.525 22.496 63.169 c
22.288 62.812 22.418 61 25.876 61.197 C
f
97.876 73.197 m
96.345 76.304 94.704 75.525 94.496 75.169 c
94.288 74.812 94.418 73 97.876 73.197 C
f
73.876 61.197 m
72.345 64.304 70.704 63.525 70.496 63.169 c
70.288 62.812 70.418 61 73.876 61.197 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Waves-Transparent)
(Waves-Transparent) 4 5.89 113.125 31.693 [
%AI3_Tile
(0 O 0 R 1 0 0.35 0 k 1 0 0.35 0 K) @
(
%AI6_BeginPatternLayer
800 Ar
2 J 0 j 1.5 w 4 M []0 d
%AI3_Note:
0 D
113.125 12.602 m
106.95 12.602 102.306 13.907 99.484 14.73 c
96.664 15.553 92.018 16.858 85.844 16.858 c
79.67 16.858 75.024 15.553 72.203 14.73 c
69.382 13.906 64.737 12.602 58.562 12.602 c
52.388 12.602 47.743 13.907 44.922 14.73 c
42.101 15.553 37.455 16.858 31.281 16.858 c
25.107 16.858 20.461 15.553 17.641 14.73 c
14.819 13.907 10.174 12.602 4 12.602 c
S
113.125 8.301 m
106.95 8.301 102.306 9.606 99.484 10.429 c
96.664 11.252 92.018 12.557 85.844 12.557 c
79.67 12.557 75.024 11.252 72.203 10.429 c
69.382 9.606 64.737 8.301 58.562 8.301 c
52.388 8.301 47.743 9.606 44.922 10.429 c
42.101 11.252 37.455 12.557 31.281 12.557 c
25.107 12.557 20.461 11.252 17.641 10.429 c
14.819 9.606 10.174 8.301 4 8.301 c
S
113.125 4 m
106.95 4 102.306 5.305 99.484 6.128 c
96.664 6.951 92.018 8.256 85.844 8.256 c
79.67 8.256 75.024 6.951 72.203 6.128 c
69.382 5.305 64.737 4 58.562 4 c
52.388 4 47.743 5.305 44.922 6.128 c
42.101 6.951 37.455 8.256 31.281 8.256 c
25.107 8.256 20.461 6.951 17.641 6.128 c
14.819 5.305 10.174 4 4 4 c
S
113.125 29.805 m
106.95 29.805 102.306 31.11 99.484 31.933 c
96.664 32.756 92.018 34.061 85.844 34.061 c
79.67 34.061 75.024 32.756 72.203 31.933 c
69.382 31.109 64.737 29.805 58.562 29.805 c
52.388 29.805 47.743 31.11 44.922 31.933 c
42.101 32.756 37.455 34.061 31.281 34.061 c
25.107 34.061 20.461 32.756 17.641 31.933 c
14.819 31.11 10.174 29.805 4 29.805 c
S
113.125 25.504 m
106.95 25.504 102.306 26.809 99.484 27.632 c
96.664 28.455 92.018 29.76 85.844 29.76 c
79.67 29.76 75.024 28.455 72.203 27.632 c
69.382 26.809 64.737 25.504 58.562 25.504 c
52.388 25.504 47.743 26.809 44.922 27.632 c
42.101 28.455 37.455 29.76 31.281 29.76 c
25.107 29.76 20.461 28.455 17.641 27.632 c
14.819 26.809 10.174 25.504 4 25.504 c
S
113.125 21.203 m
106.95 21.203 102.306 22.508 99.484 23.331 c
96.664 24.154 92.018 25.459 85.844 25.459 c
79.67 25.459 75.024 24.154 72.203 23.331 c
69.382 22.508 64.737 21.203 58.562 21.203 c
52.388 21.203 47.743 22.508 44.922 23.331 c
42.101 24.154 37.455 25.459 31.281 25.459 c
25.107 25.459 20.461 24.154 17.641 23.331 c
14.819 22.508 10.174 21.203 4 21.203 c
S
113.125 16.902 m
106.95 16.902 102.306 18.207 99.484 19.03 c
96.664 19.853 92.018 21.158 85.844 21.158 c
79.67 21.158 75.024 19.853 72.203 19.03 c
69.382 18.207 64.737 16.902 58.562 16.902 c
52.388 16.902 47.743 18.207 44.922 19.03 c
42.101 19.853 37.455 21.158 31.281 21.158 c
25.107 21.158 20.461 19.853 17.641 19.03 c
14.819 18.207 10.174 16.902 4 16.902 c
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Yellow Stripe)
(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [
%AI3_Tile
(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.1999 8.1999 m
80.6999 8.1999 L
S
8.1999 22.6 m
80.6999 22.6 L
S
8.1999 37.0001 m
80.6999 37.0001 L
S
8.1999 51.3999 m
80.6999 51.3999 L
S
8.1999 65.8 m
80.6999 65.8 L
S
8.1999 15.3999 m
80.6999 15.3999 L
S
8.1999 29.8 m
80.6999 29.8 L
S
8.1999 44.1999 m
80.6999 44.1999 L
S
8.1999 58.6 m
80.6999 58.6 L
S
8.1999 73.0001 m
80.6999 73.0001 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
7 Bn
%AI5_BeginGradient: (Black & White)
(Black & White) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Green & Blue)
(Green & Blue) 0 2 Bd
[
<
99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9
A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9
B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9
C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9
D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9
E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9
F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF
>
<
000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D
1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B
3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F5050515253535455565657585959
5A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F7071717273747475767777
78797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F9091919293949495
96979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3
B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
[
1 0.75 0 0 1 50 100 %_Bs
0.6 0 1 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Purple, Red & Yellow)
(Purple, Red & Yellow) 0 3 Bd
[
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A
>
<
CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4
D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDC
DDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5
E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDED
EDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5
F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFE
FEFEFEFFFFFF
>
0
1 %_Br
<
E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBE
BDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796
9594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E
6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746
4544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E
1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100
>
<
E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEA
EAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEE
EEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3
F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7
F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFC
FCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF
>
<
00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223
242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F4041424344454546
4748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A
6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E
8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1
B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC
>
0
1 %_Br
[
0 0.04 1 0 1 50 100 %_Bs
0 1 0.8 0 1 50 50 %_Bs
0.9 0.9 0 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Red & Yellow)
(Red & Yellow) 0 2 Bd
[
0
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EF
EFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DF
DFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CF
CFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BF
BFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AF
AFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F
9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999
>
0
1 %_Br
[
0 1 0.6 0 1 50 100 %_Bs
0 0 1 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Steel Bar)
(Steel Bar) 0 3 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0 %_Br
[
0 0 50 100 %_Bs
1 0 50 70 %_Bs
0 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (White & Purple Radial)
(White & Purple Radial) 1 2 Bd
[
<
8C8C8B8B8A898988888787868685858483838282818180807F7F7E7D7D7C7C7B7B7A7A7978787777
767675757474737272717170706F6F6E6D6D6C6C6B6B6A6A69696867676666656564646362626161
60605F5F5E5E5D5C5C5B5B5A5A5959585757565655555454535352515150504F4F4E4E4D4C4C4B4B
4A4A4949484847464645454444434342414140403F3F3E3E3D3D3C3B3B3A3A393938383736363535
3434333332323130302F2F2E2E2D2D2C2B2B2A2A2929282827272625252424232322222120201F1F
1E1E1D1D1C1C1B1A1A1919181817171615151414131312121111100F0F0E0E0D0D0C0C0B0A0A0909
08080707060605040403030202010100
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
0
1 %_Br
[
0.55 1 0 0 1 50 10 %_Bs
0 0 0 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Blue Radial)
(Yellow & Blue Radial) 1 2 Bd
[
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738
393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D
5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F808182
83848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7
A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCB
CCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0
F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF
>
<
ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191
908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A797978777776
7575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B
5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140
403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A292828272626
25242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B
0A090908070706050504030302010100
>
0
1 %_Br
[
0 0.08 0.67 0 1 50 14 %_Bs
1 1 0 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 4 Pb
Pn
Pc
1 g
Pc
0 g
Pc
0 0 0 0 k
Pc
0.75 g
Pc
0.5 g
Pc
0.25 g
Pc
0 g
Pc
Bb
2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0.25 0 0 0 k
Pc
0.5 0 0 0 k
Pc
0.75 0 0 0 k
Pc
1 0 0 0 k
Pc
0.25 0.25 0 0 k
Pc
0.5 0.5 0 0 k
Pc
0.75 0.75 0 0 k
Pc
1 1 0 0 k
Pc
Bb
2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0.25 0 0 k
Pc
0 0.5 0 0 k
Pc
0 0.75 0 0 k
Pc
0 1 0 0 k
Pc
0 0.25 0.25 0 k
Pc
0 0.5 0.5 0 k
Pc
0 0.75 0.75 0 k
Pc
0 1 1 0 k
Pc
Bb
0 0 0 0 Bh
2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0 0.25 0 k
Pc
0 0 0.5 0 k
Pc
0 0 0.75 0 k
Pc
0 0 1 0 k
Pc
0.25 0 0.25 0 k
Pc
0.5 0 0.5 0 k
Pc
0.75 0 0.75 0 k
Pc
1 0 1 0 k
Pc
(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
Pc
0.25 0.125 0 0 k
Pc
0.5 0.25 0 0 k
Pc
0.75 0.375 0 0 k
Pc
1 0.5 0 0 k
Pc
0.125 0.25 0 0 k
Pc
0.25 0.5 0 0 k
Pc
0.375 0.75 0 0 k
Pc
0.5 1 0 0 k
Pc
0 0 0 0 k
Pc
0 0.25 0.125 0 k
Pc
0 0.5 0.25 0 k
Pc
0 0.75 0.375 0 k
Pc
0 1 0.5 0 k
Pc
0 0.125 0.25 0 k
Pc
0 0.25 0.5 0 k
Pc
0 0.375 0.75 0 k
Pc
0 0.5 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0 0.25 0 k
Pc
0.25 0 0.5 0 k
Pc
0.375 0 0.75 0 k
Pc
0.5 0 1 0 k
Pc
0.25 0 0.125 0 k
Pc
0.5 0 0.25 0 k
Pc
0.75 0 0.375 0 k
Pc
1 0 0.5 0 k
Pc
0 0 0 0 k
Pc
0.25 0.125 0.125 0 k
Pc
0.5 0.25 0.25 0 k
Pc
0.75 0.375 0.375 0 k
Pc
1 0.5 0.5 0 k
Pc
0.25 0.25 0.125 0 k
Pc
0.5 0.5 0.25 0 k
Pc
0.75 0.75 0.375 0 k
Pc
1 1 0.5 0 k
Pc
0 0 0 0 k
Pc
0.125 0.25 0.125 0 k
Pc
0.25 0.5 0.25 0 k
Pc
0.375 0.75 0.375 0 k
Pc
0.5 1 0.5 0 k
Pc
0.125 0.25 0.25 0 k
Pc
0.25 0.5 0.5 0 k
Pc
0.375 0.75 0.75 0 k
Pc
0.5 1 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0.125 0.25 0 k
Pc
0.25 0.25 0.5 0 k
Pc
0.375 0.375 0.75 0 k
Pc
0.5 0.5 1 0 k
Pc
0.25 0.125 0.25 0 k
Pc
0.5 0.25 0.5 0 k
Pc
0.75 0.375 0.75 0 k
Pc
1 0.5 1 0 k
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(Layer 1) Ln
0 A
1 Ap
0 O
0 0 0 0 k
0 R
0 G
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
116 520.5 m
116 620.5 L
-36 620.5 L
-36 520.5 L
116 520.5 L
b
289 521.5 m
289 621.5 L
139 621.5 L
139 521.5 L
289 521.5 L
b
1 O
0.75 g
1 R
190.5 531.5 m
212.5911 531.5 230.5 549.4089 230.5 571.5 c
230.5 593.5911 212.5911 611.5 190.5 611.5 c
168.4089 611.5 150.5 593.5911 150.5 571.5 c
150.5 549.4089 168.4089 531.5 190.5 531.5 c
b
0 O
0 R
239.8125 532.875 m
261.9036 532.875 279.8125 550.7839 279.8125 572.875 c
279.8125 594.9661 261.9036 612.875 239.8125 612.875 c
217.7214 612.875 199.8125 594.9661 199.8125 572.875 c
199.8125 550.7839 217.7214 532.875 239.8125 532.875 c
b
0 0 0 0 k
1 R
67.5 531.25 m
89.5911 531.25 107.5 549.1589 107.5 571.25 c
107.5 593.3411 89.5911 611.25 67.5 611.25 c
45.4089 611.25 27.5 593.3411 27.5 571.25 c
27.5 549.1589 45.4089 531.25 67.5 531.25 c
b
0.75 g
0 R
464 520.5 m
464 620.5 L
314 620.5 L
314 520.5 L
464 520.5 L
b
0 0 0 0 k
390 532.5 m
412.0911 532.5 430 550.4089 430 572.5 c
430 594.5911 412.0911 612.5 390 612.5 c
367.9089 612.5 350 594.5911 350 572.5 c
350 550.4089 367.9089 532.5 390 532.5 c
b
17.75 531 m
39.8411 531 57.75 548.9089 57.75 571 c
57.75 593.0911 39.8411 611 17.75 611 c
-4.3411 611 -22.25 593.0911 -22.25 571 c
-22.25 548.9089 -4.3411 531 17.75 531 c
b
0 To
1 0 0 1 23 496.5 0 Tp
TP
2 Tr
0 0 0 1 k
/_Times-Roman 18 Tf
0 Ts
100 Tz
0 Tt
0 TA
%_ 0 XL
36 0 Xb
XB
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 0 2 2 3 Th
0 Tq
0 0 Tl
0 Tc
0 Tw
(A   B) Tx 
(\r) TX 
TO
0 To
1 0 0 1 197 496.5 0 Tp
TP
2 Tr
(A   B) Tx 
(\r) TX 
TO
0 To
1 0 0 1 388 497.5 0 Tp
TP
2 Tr
(A) Tx 
(\r) TX 
TO
0 To
1 0 0 1 64 568.5 0 Tp
TP
2 Tr
(B) Tx 
(\r) TX 
TO
0 To
1 0 0 1 9 568.5 0 Tp
TP
2 Tr
(A) Tx 
(\r) TX 
TO
0 To
1 0 0 1 183 569.5 0 Tp
TP
2 Tr
(A) Tx 
(\r) TX 
TO
0 To
1 0 0 1 384 567.5 0 Tp
TP
2 Tr
(A) Tx 
(\r) TX 
TO
0 To
1 0 0 1 233 568.5 0 Tp
TP
2 Tr
(B) Tx 
(\r) TX 
TO
0 To
1 0 0 1 388 508.5 0 Tp
TP
2 Tr
/_Symbol 18 Tf
(~) Tx 
(\r) TX 
TO
0 To
0.0481 -0.9988 0.9988 0.0481 211 508.5 0 Tp
TP
0 Tr
0 g
/_Symbol 17.9984 Tf
35.9983 0 Xb
XB
(\311  ) Tx 
(\r) TX 
TO
0 To
-0.003 1 -1 -0.003 48 496.5 0 Tp
TP
0 Tr
/_Symbol 18 Tf
36 0 Xb
XB
(\311) Tx 
(\r) TX 
TO
0 Ap
0.75 g
0 R
0 G
199.8875 570.6033 m
200.5048 558.3422 206.5923 547.6629 215.656 540.7725 C
225.1551 548.5433 230.9953 560.5343 230.331 573.7317 c
229.7137 585.9927 223.6262 596.672 214.5625 603.5625 C
205.0634 595.7917 199.2232 583.8007 199.8875 570.6033 c
b
57.75 572.5 m
57.4091 584.7719 51.5636 595.5856 42.6574 602.6783 C
32.9858 595.1234 26.877 583.267 27.2439 570.0581 c
27.5849 557.7863 33.4304 546.9727 42.3366 539.8798 C
52.0082 547.4347 58.117 559.2911 57.75 572.5 c
b
1 Ap
0 0 0 0 k
640 519.4754 m
640 619.4754 L
488 619.4754 L
488 519.4754 L
640 519.4754 L
b
1 R
591 527.1667 m
613.0911 527.1667 631 545.0756 631 567.1667 c
631 589.2578 613.0911 607.1667 591 607.1667 c
568.9089 607.1667 551 589.2578 551 567.1667 c
551 545.0756 568.9089 527.1667 591 527.1667 c
b
1 O
0.75 g
541.3333 527.1667 m
563.4244 527.1667 581.3333 545.0756 581.3333 567.1667 c
581.3333 589.2578 563.4244 607.1667 541.3333 607.1667 c
519.2422 607.1667 501.3333 589.2578 501.3333 567.1667 c
501.3333 545.0756 519.2422 527.1667 541.3333 527.1667 c
b
0 To
1 0 0 1 531 563.5 0 Tp
TP
2 Tr
0 O
0 0 0 1 k
0 R
/_Times-Roman 18 Tf
(A) Tx 
(\r) TX 
TO
0 To
1 0 0 1 589 563.5 0 Tp
TP
2 Tr
(B) Tx 
(\r) TX 
TO
0 To
1 0 0 1 550 496.5 0 Tp
TP
2 Tr
(A   B) Tx 
(\r) TX 
TO
0 Ap
0 g
565 502.5 m
574 502.5 l
B
1 g
581.3333 568.5 m
580.9924 580.7719 575.1469 591.5856 566.2407 598.6783 C
556.5691 591.1234 550.4603 579.267 550.8272 566.0581 c
551.1682 553.7863 557.0137 542.9727 565.9199 535.8798 C
575.5915 543.4347 581.7003 555.2911 581.3333 568.5 c
b
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
