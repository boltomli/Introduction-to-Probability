%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 5.0
%%For: (Fuxing) (Dartmouth College)
%%Title: (PSfig9.9.ps)
%%CreationDate: (3/28/97) (10:54 AM)
%%BoundingBox: 0 -3 402 249
%%HiResBoundingBox: 0 -2.4988 401.1952 248.9988
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: Courier
%%+ Helvetica
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 2.1
%AI3_ColorUsage: Color
%AI3_TemplateBox: 202 124 202 124
%AI3_TileBox: 0 0 552 728
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -206 508 1 794 557 18 0 1 3 40
%AI5_OpenViewLayers: 7
%%EndComments
%%BeginProlog

% ------------------------------------------------------
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
% ------------------------------------------------------

userdict /Adobe_level2_AI5 23 dict dup begin
	put

% use packed arrays immediately
	% packedarray emulation
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
		end
		0
	} if
	pop

% activate packing now
	userdict /defaultpacking currentpacking put true setpacking


% initialize, terminate
	% note : no binding loop needed here by design

	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
			end
		} if
	} bind def

% mark for later stack clean-up
	mark

% custom color business
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch aload pop pop
			4
			{
				4 index mul 4 1 roll
			} repeat
			5 -1 roll pop
			setcmykcolor
		}	% don't bind 'setcmykcolor in this procedure
		def
	} if

%	new version checks for non-numeric version strings (5.0.1 fix bh 10/25/93)
%	/gt38? {version cvx exec} stopped {pop true} {38 gt} ifelse def
	
%	newer version handles errors on clones with cvx or exec which would leave junk on the stack
%	(bh 12/2/93)
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def

	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put

% test for Level 2 availability
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put


/level2ScreenFreq		%	halftoneDict level2ScreenFreq screenFreq
{
	begin
		60	% 60 lpi is default
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
	end
} bind def

userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put

level2? not
	{
		% LEVEL 1+ EMULATIONS (typesetter/color printer extensions)

		% cmyk => gray conversion emulation
		% note this revision approved by Ed Taft
		% for correcting the out of gamut problem
		% in our current emulations

		% don't bind these guys so 'setgray/currentgray can be overloaded
		/setcmykcolor where not
		{
			% see red book II, pp. 305
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if

		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if


		% LEVEL 2 EMULATIONS

		% setoverprint emulation
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if

		% selectfont emulation
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if

		% cshow emulation
		/cshow where not
		{
			% {proc} (string)
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if

% clean up
	cleartomark

	/anyColor?
	{
		add add add 0 ne
	} bind def

	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def

	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def

	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put

% *** other separation state tests if we're not on a composite page	
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
		end
	} if

	end defaultpacking setpacking

%%EndResource

% ------------------------------------------------------
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
% ------------------------------------------------------

currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize	% varsDict mainDict initialize -
{
	begin	% begin main procset
	begin	% begin vars procset
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
	end

	% take main and vars off the stack
	end
	end

	Adobe_typography_AI5 begin
} def
/terminate	% - terminate -
{
	currentdict Adobe_typography_AI5 eq
	{
		end
	} if
} def

% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef

	% pointer for sequential encodings
	/_pntr 0 ddef
	{
		% get bottom object
		counttomark -1 roll

		% is it a mark ?
		dup type dup /marktype eq
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....

			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop

	% return the modified encoding
	_tempEncode
} def

/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def

% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ
{
	% set weight vector (if present)
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse

	% platform dependent coding flag
	/_useNativeEncoding exch def

	% pop fontScript & direction
	pop pop

	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict

	begin

	% copy all the values but the FID
	% into the new dictionary
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	% discard last mark
	pop

	% define FontName
	/FontName exch def

	% if no re-encoding stream is present
	% then if the base encoding vector of the font
	% is the same as StandardEncoding
	% and the use platform encoding flag is true
	% then install AI platform encoding
	% else leave the base encoding in effect

	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		% clean up
		cleartomark
	}
	{
		% custom encoding to be done
		% start off with a copy of the font's standard encoding
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
	end

	% register the new font
	definefont pop
} def

% text painting operators
/tr	% string tr ax ay string 
{
	_ax _ay 3 2 roll
} def
/trj	% string trj cx cy fillchar ax ay string 
{
	_cx _cy _sp _ax _ay 6 5 roll
} def

/a0
{
	/Tx	% text							% textString Tx -
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx	% text							% textString Tx -
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def

/e0
{
	/Tx	% text							% textString Tx -
	{
		tr _psf
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		trj _pjsf
	} ddef
} def

/e1
{
	/Tx	% text							% textString Tx -
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def

/i0
{
	/Tx	% text							% textString Tx -
	{
		tr sp
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		trj jsp
	} ddef
} def

/i1
{
	W N
} def

/o0
{
	/Tx	% text							% textString Tx -
	{
		tr sw rmoveto
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		trj swj rmoveto
	} ddef
} def

/r0
{
	/Tx	% text							% textString Tx -
	{
		tr _ctm _pss
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		trj _ctm _pjss
	} ddef
} def

/r1
{
	/Tx	% text							% textString Tx -
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def

% font operators

% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def

/TO	% end text					% TO -
{
	iTe _ctm setmatrix newpath
} def

% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def

/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def

% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def

/iTm	% internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def

/Tm	% set text matrix				% a b c d tx ty Tm -
{
	_tm astore pop iTm 0 0 moveto
} def

/Td	% translate text matrix 		% tx ty Td -
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def

/iTe	% end render					% - iTe -
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def


% Attributes
/Ta	% set alignment					% alignment Ta -
{
	pop
} def

/Tf	% set font name and size		% fontname size Tf -
{
	dup 1000 div /_fScl exch ddef
% was  (bh 11/23/93)
% 	exch findfont exch scalefont setfont
%
	selectfont
} def

/Tl	% set leading					% leading paragraphLeading Tl -
{
	pop
	0 exch _leading astore pop
} def

/Tt	% set user tracking				% userTracking Tt -
{
	pop
} def

/TW	% set word spacing				% minSpace optSpace maxSpace TW -
{
	3 npop
} def

/Tw	% set computed word spacing		% wordSpace Tw
{
	/_cx exch ddef
} def

/TC	% set character spacing			% minSpace optSpace maxSpace TC -
{
	3 npop
} def

/Tc	% set computed char spacing 	% charSpace Tc -
{
	/_ax exch ddef
} def

/Ts	% set super/subscripting (rise)	% rise Ts -
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def

/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
	3 npop
} def

/Tz	% set horizontal scaling		% scalePercent Tz -
{
	100 div /_hs exch ddef
	iTm
} def

/TA	% set pairwise kerning			% autoKern TA -
%	autoKern = 0 -> no pair kerning
%			 = 1 -> automatic pair kerning
{
	pop
} def

/Tq	% set hanging quotes			% hangingQuotes Tq -
%	hangingQuotes 	= 0 -> no hanging quotes
%			 		= 1 -> hanging quotes
{
	pop
} def

/Th	% set hyphenation				% hyphenate? limitLines? minLead minTail maxLines Th -
% 	hyphenate?	= 0 -> don't hyphenate
%				= 1 -> do hyphenate
% 	limitLines? = 0 -> no limit
%				= 1 -> limit consecutive hyphenated lines
%	minLead		Closest hyphen to beginning of word (0..n)
% 	minTail		Closest hyphen to end of word (0..n)
% 	maxLines	Maximum number of consecutive hyphenated lines (1..n)
{
	pop pop pop pop pop
} def


% Text Bodies
/TX
{
	pop
} def

% /Tx	% non-justified text			% textString Tx -
% /Tj	% justified text				% textString Tj -

/Tk	% kern							% autoKern kernValue Tk -
%  	autoKern = 0 -> manual kern, = 1 -> auto kern
%	kernValue = kern value in em/1000 space
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
	2 npop
} def

/T*	% carriage return & line feed	% - T* -
{
	_leading aload pop neg Td
} def

/T*-	% carriage return & negative line feed	% - T*- -
{
	_leading aload pop Td
} def

/T-	% print a discretionary hyphen	% - T- -
{
	% backup the pen position by the letterspacing so that
	% full-justified, auto-hyphenated lines display properly
	% [John Farmer 11/18/95]
	_ax neg 0 rmoveto
	_hyphen Tx
} def

/T+	% discretionary hyphen hyphen	% - T+ -
{
} def

/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def

/TS	% special chars					% textString justified TS -
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def

% Tab extensions for 5.5 (Glenn Reid 1/26/94)

/Xb % begin tab definitions			% <unused> tabCount Xb -
{
	pop pop
} def
/Tb /Xb load def

/Xe % one tab stop					% leader(char) decimal(char) type(int) distance Xe -
{
	pop pop pop pop
} def
/Te /Xe load def

/XB % end tab definitions			% - XB -
{
} def
/TB /XB load def

currentdict readonly pop
end
setpacking

%%EndResource

% ------------------------------------------------------
%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0
% ColorImage Emulation and Separation Code for Grayscale, RGB and CMYK images
% Version 1.0 12/25/95
% Copyright (C) 1995-96
% Adobe Systems Incorporated
% All Rights Reserved
% ------------------------------------------------------

userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 17 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin

% ------------------------------------------------------
% Routine Overview
% 
%	String Iterators
%		WalkRGBString (given a single source string, convert each pixel to cmyk and call a proc)
%		WalkCMYKString (given a single source string, get the components and call a proc)
% 
%	Level1 Emulator Routines
%		StuffRGBIntoGrayString
%		RGBToGrayImageProc
%		StuffCMYKIntoGrayString 
%		CMYKToGrayImageProc 
%		ColorImageCompositeEmulator 
% 
%	ColorImage CMYK Separation Hacks (For [Applications] that only support planar images)
%		CMYKToSeparatedCMYKImageProc
% 
%	ColorImage and Utility Routines.
%		FourEqual
%		TestPlateIndex
%		colorimage
% 
% ------------------------------------------------------	

/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def

/terminate { end } def

currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 14 dict def
} if

Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
end

/WalkRGBString null def
/WalkCMYKString null def

/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def

/SeparateCMYKImageProc null def

/FourEqual null def
/TestPlateIndex null def

% define _colorimage if it doesn't already exist
currentdict /_colorimage known not
{
	/colorimage where
	{
		% sourcedictionary (systemdict or a separation proc redefinition)
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if

/_currenttransfer systemdict /currenttransfer get def

/colorimage null def
/XI null def

% ------------------------------------------------------
% rgb proc out --WalkRGBString--
% ------------------------------------------------------

/WalkRGBString
{
	% rgb proc out
	0 3 index

	% rgb proc out outindex rgb
	dup length 1 sub 0 3 3 -1 roll
	{
		% rgb proc out outindex rgb index
		3 getinterval { } forall

		% call the stuff proc
		% rgb proc out outindex r g b
		5 index exec

		% push rgb for the next loop iteration
		% rgb proc out outindex
		3 index
		% rgb proc out outindex rgb
	} for
	
	% clean up the stack
	% rgb proc out outindex rgb
	 5 { pop } repeat

} def

% ------------------------------------------------------
% cmyk proc gray --WalkCMYKString--
% ------------------------------------------------------

/WalkCMYKString
{
	% cmyk proc gray
	0 3 index

	% cmyk proc gray grayindex cmyk
	dup length 1 sub 0 4 3 -1 roll
	{
		% cmyk proc gray grayindex cmyk index
		4 getinterval { } forall
		
		% cmyk proc gray grayindex c m y k
		6 index exec
		
		% cmyk proc gray grayindex
		3 index
		
		% cmyk proc gray grayindex cmyk
	} for
	
	% clean up the stack
	% cmyk proc gray grayindex cmyk
	5 { pop } repeat
	
} def

% ------------------------------------------------------
% gray grayindex r g b --StuffRGBIntoGrayString-- gray grayindex
% ------------------------------------------------------

/StuffRGBIntoGrayString
{
	% gray grayindex r g b
	.11 mul exch
	
	% gray grayindex r bk g
	.59 mul add exch
	
	% gray grayindex bkgk r
	.3 mul add
	
	% gray grayindex k
	cvi 3 copy put
	
	% gray grayindex k
	pop 1 add
} def

% ------------------------------------------------------
% --RGBToGrayImageProc-- string
% ------------------------------------------------------

/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin	
		% call the source proc to get the chunky rgb string
		sourcearray 0 get exec

		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)
		% rgb
		dup length 3 idiv string

		% roll off a copy of the gray string
		% rgb gray
		dup 3 1 roll 
		
		% push the stuff proc that we want called by WalkRGBString
		% gray rgb gray
		/StuffRGBIntoGrayString load exch

		% call the rgb conversion iterator
		% gray rgb proc gray
		WalkRGBString

		% return the gray string
		% gray	
	end
} def

% ------------------------------------------------------
% gray grayindex c m y k --StuffCMYKIntoGrayString-- gray grayindex
% ------------------------------------------------------

/StuffCMYKIntoGrayString
{
	% gray grayindex c m y k
	exch .11 mul add
	
	% gray grayindex c m yk
	exch .59 mul add
	
	% gray grayindex c mkyk
	exch .3 mul add
	
	% pin k to 255
	% gray gray index k
	dup 255 gt { pop 255 } if
	
	% gray grayindex k
	255 exch sub cvi 3 copy put
	
	% gray grayindex k
	pop 1 add
} def

% ------------------------------------------------------
% --CMYKToGrayImageProc-- string
% ------------------------------------------------------

/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		% call the source proc to get the chunky cmyk string
		sourcearray 0 get exec

		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)
		% cmyk
		dup length 4 idiv string

		% roll off a copy of the gray string
		% cmyk gray
		dup 3 1 roll 
		
		% push the stuff proc that we want called by WalkCMYKString
		% gray cmyk gray
		/StuffCMYKIntoGrayString load exch

		% call the cmyk iterator
		% gray cmyk proc gray
		WalkCMYKString

		% return the gray string
		% gray
	end
} def

% ------------------------------------------------------
% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --ColorImageCompositeEmulator--
% ------------------------------------------------------

/ColorImageCompositeEmulator
{
	% Channelcount is already saved in Adobe_ColorImage_AI6_Vars. Our data is always in chunky form so punt if someone
	% calls colorimage on a level 1 device with planar data.
	% channelcount and multiplesources are already saved in Adobe_ColorImage_AI6_Vars. The image operator isn't going to use them.
	pop true eq
	{
		% pop off the parameters and return
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				% save off the original chunky source function
				sourcearray 0 3 -1 roll put
			
				% push the appropriate cover proc
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
			end
		} if
		image
	} ifelse
} def

% ------------------------------------------------------
% --SeparateCMYKImageProc-- string
% ------------------------------------------------------

/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin

		sourcecount 0 ne
		{
			% planar case: call the source proc for the current plate and return its result
			sourcearray plateindex get exec
		}
		{			
			% call the source proc to get the chunky cmyk string
			sourcearray 0 get exec
			
			% make a grayscale string of the same pixel count (ouch, pull me out of this loop)
			% cmyk
			dup length 4 idiv string
			
			% cmyk
			0 2 index
			
			% cmyk gray grayindex cmyk
			plateindex 4 2 index length 1 sub
			{
				% cmyk gray grayindex cmyk channelindex
				get 255 exch sub
				
				% cmyk gray grayindex grayvalue
				3 copy put pop 1 add
				
				% cmyk gray grayindex
				2 index
			} for

			% return the gray string
			% cmyk gray grayindex cmyk
			pop pop exch pop
		} ifelse
	end
} def
	
% ------------------------------------------------------
% s1 s2 s3 s4 c1 c2 c3 c4 --FourEqual--
% ------------------------------------------------------

/FourEqual
{
	% s1 s2 s3 s4 c1 c2 c3 c4
	4 index ne
	{
		pop pop pop false
	}
	{
		% s1 s2 s3 s4 c1 c2 c3
		4 index ne
		{
			pop pop false
		}
		{
			% s1 s2 s3 s4 c1 c2
			4 index ne
			{
				pop false
			}
			{
				% s1 s2 s3 s4 c1
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def

% ------------------------------------------------------
%  --TestPlateIndex-- plateindex
% ------------------------------------------------------

/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		% assume we're not separating
		/plateindex -1 def

		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore

			% cyan plate?
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				% magenta plate?
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					% yellow plate?
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						% black plate
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
	end
} def

% ------------------------------------------------------
% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --colorimage--
% ------------------------------------------------------

/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def

		% setup for following if statement
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
	end
	
	% is this not 1 or 8 bit?
	{
		% Call the original proc if the image is at a weird bit depth. This will display a composite if we're separating, but too bad.
		/_colorimage load null ne
		{
			% call the original (they probably punt if we're separating)
			_colorimage
		}
		{
			% pop off the parameters and return
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		% Call the saved colorimage operator if this an rgb, we're printing a composite or we're separating
		% an image to a custom plate. The last case assumes that the separation procs surrounding us
		% take care of punching out
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			% Call the colorimage emulator if we're printing to a level 1 device
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				% call image if this is a grayscale so that Quark doesn't die on custom plates
				dup 1 eq
				{
					pop pop image
				}
				{
					% draw to the null device if we're on a custom plate
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						% stolen from PhotoShop
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						% push the appropriate transfer proc (first case is negative
						% second case is positive) and call settransfer
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					% restore from the null device if necessary
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			% Are we separating a grayscale image?
			dup 1 eq
			{
				% let the surrounding separation procset handle the separation
				pop pop
				image
			}
			{
				% pop channelcount and multiplesources since they're not used by the image operator
				pop pop

				% Prepare to call the image operator with a cover proc
				Adobe_ColorImage_AI6_Vars begin
					% save off the source procs for our cover proc
					% width height bitsperpixel matrix firstsource...lastsource
					sourcecount -1 0
					{			
						% width height bitsperpixel matrix firstsource...lastsource index
						exch sourcearray 3 1 roll put
					} for

					/SeparateCMYKImageProc load
				end

				% bypass the separation procset since some applications don't handle chunky and the
				% old separator doesn't handle colorimage
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def

% ------------------------------------------------------
% --XI--
% ------------------------------------------------------

/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			% skip the %BeginBinary comment
			currentfile 128 string readline pop pop
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			% synch the PostScript fill with Illustrator's notion of the current fill
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
			
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			% call image if passed grayscale or bitmap data. Some applications
			% die if colorimage is called with gray data.
			XIChannelCount 1 eq
			{
				% Some applications refuse to separate a grayscale image to the black plate if
				% the currentgray is white. Hack around.
				
				gsave
				0 setgray
				
				image
				
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse

		grestore
	end
} def
	
end

%%EndProcSet

% ------------------------------------------------------
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
% ------------------------------------------------------

currentpacking true setpacking

% 71 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put

% paint operands
/_eo false def
/_lp /none def
/_pf
{
} def	% paint fill
/_ps
{
} def	% paint stroke
/_psf
{
} def	% paint string fill
/_pss
{
} def	% paint string stroke
/_pjsf
{
} def	% paint justified string fill
/_pjss
{
} def	% paint justified string stroke
/_pola 0 def
/_doClip 0 def

% paint operators
/cf currentflat def	% - cf flatness

% typography operands
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def	% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def	% y character spacing
/_cx 0 def	% x word spacing
/_cy 0 def	% y word spacing
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def

% typography operators
/Tx
{
} def
/Tj
{
} def

% compound path operators
/CRender
{
} def

% printing
/_AI3_savepage
{
} def

% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def

% pattern operands
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def

% discard variables (12 total)

/discardSave null def	% holds save used in discard loop
/buffer 256 string def	% line buffer string : assume 256 chars/line
/beginString null def	% begin delimiter
/endString null def	% end delimiter
/endStringLength null def	% holds buffer size for reading by byte technique
/layerCnt 1 def	% internal variables for discard loop
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def

% variable for doing clipping without rendering
/clipForward? false def

% end the vars dictionary
end
% =========================================


userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if

userdict /Adobe_Illustrator_AI5 get begin


% initialization
/initialize	% - initialize -
{
	% pushing main on the stack
	Adobe_Illustrator_AI5 dup begin

	% push the vars dictionary
	Adobe_Illustrator_AI5_vars begin

	% at this point the main and vars dictionaries
	% are in the state we wish them to be
	% on exit from the initialize call

	% bind the procedures in the discard dictionary
	discardDict
	{
		bind pop pop
	} forall

	% begin the nc dictionary
	dup /nc get begin

	% bind the procs in main
	{
		% added a test for type = operatortype so procedures like Ln can be defined as an alias for 'pop
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall

	% turn off 'nc
	end

	newpath

	% on exit we have main and vars on top of dict stack
} def

/terminate	% - terminate -
{
	end
	end
} def

% definition operators
/_	% - _ null
null def
/ddef	% key value ddef -
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput	% key value literal xput -
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
	end
} def
/npop	% integer npop -
{
	{
		pop
	} repeat
} def

% marking operators
/sw	% ax ay string sw x y
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj	% cx cy fillchar ax ay string swj x y
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss	% ax ay string matrix ss -
{
	4 1 roll
	{
		% matrix ax ay char 0 0 {proc} -
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss	% cx cy fillchar ax ay string matrix jss -
{
	4 1 roll
	{
		% cx cy fillchar matrix ax ay char 0 0 {proc} -   
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def

% path operators
/sp	% ax ay string sp -
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp	% cx cy fillchar ax ay string jsp -
{
	{
		% cx cy fillchar ax ay char 0 0 {proc} -
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def

% path construction operators
/pl	% x y pl x y
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def

/setstrokeadjust where
{
	pop true setstrokeadjust
	/c	% x1 y1 x2 y2 x3 y3 c -
	{
		curveto
	} def
	/C
	/c load def
	/v	% x2 y2 x3 y3 v -
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y	% x1 y1 x2 y2 y -
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l	% x y l -
	{
		lineto
	} def
	/L
	/l load def
	/m	% x y m -
	{
		moveto
	} def
}
{
	% else
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse

% graphic state operators
/d	% array phase d -
{
	setdash
} def
/cf
{
} def	% - cf flatness
/i	% flatness i -
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j	% linejoin j -
{
	setlinejoin
} def
/J	% linecap J -
{
	setlinecap
} def
/M	% miterlimit M -
{
	setmiterlimit
} def
/w	% linewidth w -
{
	setlinewidth
} def

% path painting operators
/XR	% flag XR -
{
	0 ne
	/_eo exch ddef
} def
/H	% - H -
{
} def
/h	% - h -
{
	closepath
} def
/N	% - N -
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n	% - n -
{
	N
} def
/F	% - F -
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f	% - f -
{
	closepath
	F
} def
/S	% - S -
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s	% - s -
{
	closepath
	S
} def
/B	% - B -
{
	_pola 0 eq
	{
		_doClip 1 eq	% F clears _doClip
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b	% - b -
{
	closepath
	B
} def
/W	% - W -
{
	/_doClip 1 ddef
} def
/*	% - [string] * -
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	% used to call newpath only if _polo was 0; now newpath is called unconditionally (bh 3/24/94)
	newpath
} def

% group operators
/u	% - u -
{
} def
/U	% - U -
{
} def
/q	% - q -
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q	% - Q -
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u	% - *u -
{
	_pola 1 add /_pola exch ddef
} def
/*U	% - *U -
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D	% polarized D -
{
	pop
} def
/*w	% - *w -
{
} def
/*W	% - *W -
{
} def

% place operators
/`	% matrix llx lly urx ury string ` -
{
	/_i save ddef

% * special case of clipping forward without rendering
	% use 'nulldevice if true
	clipForward?
	{
		nulldevice
	} if

	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~	% - ~ -
{
	end
	_i restore
} def

% color operators
/O	% flag O -
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R	% flag R -
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g	% gray g -
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G	% gray G -
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k	% cyan magenta yellow black k -
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K	% cyan magenta yellow black K -
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x	% cyan magenta yellow black name gray x -
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X	% cyan magenta yellow black name gray X -
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def

% locked object operator
/A	% value A -
{
	pop
} def

% annotate page operator
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def



% object tag operator
% joe holt November 20, 1994

% /name (value) XT
/XT {
	pop pop
} def


% begin layer PostScript implementation

% general purpose discard loop
% works on early level 1 (v.23, v.38) PostScript printers
% version 0.02 04/03/93
% Bill Woodruff

% constraints :

% if nested discards must be handled
% then the begin and end delimiting
% strings must be of equal length

% arguments

% #nestingFlag
% #nestingFlag = 0  				no nesting
% #nestingFlag = 1  				nesting

% non-nested case
% note : since the non-nested case is invoked
% after the ocurrence of a beginning string
% we only have to look for the ending string
% it is not necessary to specify a beginning string

% 0 (endString) 

% nested case

% (beginString) 1 (endString) 

% the discard procedure is defined in the main dictionary
% it turns the discard dictionary on to execute the discard function
/discard
{
	% test for version, hash a key
	% get and execute the discard procedure from dictionary
	% execute it in a stopped context so we can bail with 'stop
	% wrap it in a save so we don't have to reset variables
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
	end
	discardSave restore
} bind def

% build the discard dictionary which will contain only procedures
userdict /discardDict 7 dict dup begin
put

% pre 38 initialization
/pre38Initialize
{
	% used as buffer size for reading by byte technique	
	/endStringLength endString length store

	/newBuff buffer 0 endStringLength getinterval store	%	new buffer equal in length to end string
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	%	pointer to from 2nd to last char in new buffer
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store	%	pointer to last char in new buffer
} def

% for <=38	
/shiftBuffer
{
	% shift last chars of newBuff to start of newBuff
	newBuff 0 newBuffButFirst putinterval
	% new character into last byte of newBuff
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def

% discard procedures

% no nesting, older ps
0
{
	pre38Initialize
	mark
	% fill the buffer
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def

% nesting, older ps
1
{
	pre38Initialize

	/beginString exch store

	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse

			shiftBuffer
		} loop
	} if
} def

% no nesting, newer ps
2
{
	mark
	{
		% read a line : exit if end of file reached
		currentfile buffer readline not
		{
		stop
		} if

		% end of layer ?
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def

% nesting, newer ps
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		% read a line : exit if end of file reached
		currentfile buffer readline not
		{
		stop
		} if

		% start of layer ?
		dup beginString eq
		{
			% update layer counter
			pop /layerCnt dup load 1 add store
		}
		{
			% end of layer ?
			endString eq
			{
				% stop if we're not nested
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					% nested : decrement layer counter
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def

% end discard dictionary
end

% define the dictionary for clipping without rendering

userdict /clipRenderOff 15 dict dup begin
put

% flag for marking this dictionary as active
% so we can test in /` and wrap placed
% elements in nulldevice
% /clipForward? true def

% re-define rendering primitives to clip and newpath
% based on value of /_doClip flag
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall

% modify 'Tr so Tj and Tx are never set up by
% the calls to 'a0, 'e0, etc.
/Tr /pop load def

% special case of 'cshow ?
% is so, we'll have to overload toplevels
% /patternashow /patternawidthshow
% /patternashowstroke
% /patternawidthshowstroke
% /ss /jss /sp /jsp

% perhaps we can bracket out patterns at a higher level ?
% for example, by modifying 'E to pop off its parameters

% call to 'show in 'patternpath ?
% calls to 'ashow in '_psf ?
% calls to 'awidthshow in '_pjsf ?
% calls to 'widthshow in '_jss and '_jsp ?

% disable gradient operators
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def

% end dictionary for clipping without rendering
end

/Lb	% visible preview enabled printing dimmed masks colorIndex red green blue  ==> Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop

	% #masks #printing 

	% assume that
	% masks = 1 masks forward, masks = 0 no masking or only local masking	

	% do the right thing for printing and masking layer
	0 eq
	{
		% non-printing layer

		0 eq
		{
			% no masking forward from this layer
			% nested discard call
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			% masking forward from this layer
			% no printing, but clip path must survive
			
			% set the clipForward? flag in the vars dict
			/clipForward? true def
			
			% redefine Tx and Tj in the vars dict
			/Tx /pop load def
			/Tj /pop load def
			
			% turn on the no rendering dictionary
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		% printing layer

		% encapsulate layer with 'save
		% only if there is no masking forward

		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def

% end layer :
% assume that if discardSave is non-null
% then the layer was bracketed by 'save...restore
% else we must test for clipping forward
/LB	% ==> Lb ==> .....
{
	discardSave dup null ne
	{
		% undo the save
		restore
	}
	{
		pop

		clipForward?
		{
			% assume dictionary stack :

			%		vars			
			%		clipRenderOff			
			%		main

			currentdict
			end
			end
			begin

			% dictionary stack :

			%		vars			
			%		main
					
			/clipForward? false ddef

		} if
	} ifelse
} bind def

% begin palette discard
% assume no nesting
/Pb	% topLeftCell selected Pb -
{
	pop pop
	% non nested discard
	0 (%AI5_EndPalette) discard
} bind def

% other type of discard
% assume no nesting
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def

% express layer name
/Ln /pop load def	% ==> Ln ==> .....

% path center-point flag operator
/Ap	% value Ap -
/pop load def

% device-independent flatness
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def

% multi-layer clipping
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def

% null color operators
/nc 3 dict def
nc begin
/setgray	% gray setgray -
{
	pop
} bind def
/setcmykcolor	% cyan magenta yellow black setcmykcolor -
{
	4 npop
} bind def
/setcustomcolor	% object tint setcustomcolor -
{
	2 npop
} bind def
% exit 'nc dictionary
currentdict readonly pop
end

% exit main dictionary
% currentdict readonly pop
end
setpacking

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Helvetica
Adobe_level2_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Yellow Stripe)
(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [
%AI3_Tile
(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.1999 8.1999 m
80.6999 8.1999 L
S
8.1999 22.6 m
80.6999 22.6 L
S
8.1999 37.0001 m
80.6999 37.0001 L
S
8.1999 51.3999 m
80.6999 51.3999 L
S
8.1999 65.8 m
80.6999 65.8 L
S
8.1999 15.3999 m
80.6999 15.3999 L
S
8.1999 29.8 m
80.6999 29.8 L
S
8.1999 44.1999 m
80.6999 44.1999 L
S
8.1999 58.6 m
80.6999 58.6 L
S
8.1999 73.0001 m
80.6999 73.0001 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
3 Bn
%AI5_BeginGradient: (Black & White)
(Black & White) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Red & Yellow)
(Red & Yellow) 0 2 Bd
[
0
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EF
EFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DF
DFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CF
CFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BF
BFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AF
AFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F
9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999
>
0
1 %_Br
[
0 1 0.6 0 1 50 100 %_Bs
0 0 1 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Blue Radial)
(Yellow & Blue Radial) 1 2 Bd
[
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738
393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D
5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F808182
83848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7
A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCB
CCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0
F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF
>
<
ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191
908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A797978777776
7575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B
5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140
403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A292828272626
25242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B
0A090908070706050504030302010100
>
0
1 %_Br
[
0 0.08 0.67 0 1 50 14 %_Bs
1 1 0 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
Pn
Pc
1 g
Pc
0 g
Pc
0 0 0 0 k
Pc
0.75 g
Pc
0.5 g
Pc
0.25 g
Pc
0 g
Pc
Bb
2 (Black & White) -4118 4444 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0.25 0 0 0 k
Pc
0.5 0 0 0 k
Pc
0.75 0 0 0 k
Pc
1 0 0 0 k
Pc
0.25 0.25 0 0 k
Pc
0.5 0.5 0 0 k
Pc
0.75 0.75 0 0 k
Pc
1 1 0 0 k
Pc
Bb
2 (Red & Yellow) -4118 4444 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0.25 0 0 k
Pc
0 0.5 0 0 k
Pc
0 0.75 0 0 k
Pc
0 1 0 0 k
Pc
0 0.25 0.25 0 k
Pc
0 0.5 0.5 0 k
Pc
0 0.75 0.75 0 k
Pc
0 1 1 0 k
Pc
Bb
0 0 0 0 Bh
2 (Yellow & Blue Radial) -4118 4444 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0 0.25 0 k
Pc
0 0 0.5 0 k
Pc
0 0 0.75 0 k
Pc
0 0 1 0 k
Pc
0.25 0 0.25 0 k
Pc
0.5 0 0.5 0 k
Pc
0.75 0 0.75 0 k
Pc
1 0 1 0 k
Pc
(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
Pc
0.25 0.125 0 0 k
Pc
0.5 0.25 0 0 k
Pc
0.75 0.375 0 0 k
Pc
1 0.5 0 0 k
Pc
0.125 0.25 0 0 k
Pc
0.25 0.5 0 0 k
Pc
0.375 0.75 0 0 k
Pc
0.5 1 0 0 k
Pc
0 0 0 0 k
Pc
0 0.25 0.125 0 k
Pc
0 0.5 0.25 0 k
Pc
0 0.75 0.375 0 k
Pc
0 1 0.5 0 k
Pc
0 0.125 0.25 0 k
Pc
0 0.25 0.5 0 k
Pc
0 0.375 0.75 0 k
Pc
0 0.5 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0 0.25 0 k
Pc
0.25 0 0.5 0 k
Pc
0.375 0 0.75 0 k
Pc
0.5 0 1 0 k
Pc
0.25 0 0.125 0 k
Pc
0.5 0 0.25 0 k
Pc
0.75 0 0.375 0 k
Pc
1 0 0.5 0 k
Pc
0 0 0 0 k
Pc
0.25 0.125 0.125 0 k
Pc
0.5 0.25 0.25 0 k
Pc
0.75 0.375 0.375 0 k
Pc
1 0.5 0.5 0 k
Pc
0.25 0.25 0.125 0 k
Pc
0.5 0.5 0.25 0 k
Pc
0.75 0.75 0.375 0 k
Pc
1 1 0.5 0 k
Pc
0 0 0 0 k
Pc
0.125 0.25 0.125 0 k
Pc
0.25 0.5 0.25 0 k
Pc
0.375 0.75 0.375 0 k
Pc
0.5 1 0.5 0 k
Pc
0.125 0.25 0.25 0 k
Pc
0.25 0.5 0.5 0 k
Pc
0.375 0.75 0.75 0 k
Pc
0.5 1 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0.125 0.25 0 k
Pc
0.25 0.25 0.5 0 k
Pc
0.375 0.375 0.75 0 k
Pc
0.5 0.5 1 0 k
Pc
0.25 0.125 0.25 0 k
Pc
0.5 0.25 0.5 0 k
Pc
0.75 0.375 0.75 0 k
Pc
1 0.5 1 0 k
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(Layer 1) Ln
0 A
0 R
1 1 1 0 K
800 Ar
1 J 1 j 0.7932 w 500 M []0 d
%AI3_Note:
0 D
79.4637 9.3312 m
79.4637 11.8099 l
S
0 O
1 1 1 0 k
0 0 m
F
0 To
10 0 0 10 73.4487 0.0012 0 Tp
TP
0 Tr
0 J 0 j 1 w 4 M
/_Courier 1 Tf
0 Ts
100 Tz
0 Tt
0 TA
%_ 0 XL
36 0 Xb
XB
0 0 0 TC
100 100 100 TW
0 0 0 Ti
0 Ta
0 0 2 2 3 Th
0 Tq
0 0 Tl
0 Tc
0 Tw
(-4) Tx 
(\r) TX 
TO
0 R
1 1 1 0 K
1 J 1 j 0.7932 w 500 M
168.5751 9.3312 m
168.5751 11.8099 l
S
0 O
1 1 1 0 k
0 0 m
F
0 To
10 0 0 10 162.7051 0.0012 0 Tp
TP
0 Tr
0 J 0 j 1 w 4 M
(-2) Tx 
(\r) TX 
TO
0 R
1 1 1 0 K
1 J 1 j 0.7932 w 500 M
346.7979 9.3312 m
346.7979 11.8099 l
S
0 O
1 1 1 0 k
0 0 m
F
0 To
10 0 0 10 344.0929 0.0012 0 Tp
TP
0 Tr
0 J 0 j 1 w 4 M
(2) Tx 
(\r) TX 
TO
0 R
1 1 1 0 K
1 J 1 j 0.3966 w 500 M
97.2868 9.3312 m
97.2868 10.8184 l
S
115.1098 9.3312 m
115.1098 10.8184 l
S
132.9289 9.3312 m
132.9289 10.8184 l
S
150.752 9.3312 m
150.752 10.8184 l
S
186.3982 9.3312 m
186.3982 10.8184 l
S
204.2212 9.3312 m
204.2212 10.8184 l
S
222.0443 9.3312 m
222.0443 10.8184 l
S
239.8634 9.3312 m
239.8634 10.8184 l
S
275.5096 9.3312 m
275.5096 10.8184 l
S
293.3326 9.3312 m
293.3326 10.8184 l
S
311.1557 9.3312 m
311.1557 10.8184 l
S
328.9788 9.3312 m
328.9788 10.8184 l
S
61.6406 9.3312 m
61.6406 10.8184 l
S
43.8175 9.3312 m
43.8175 10.8184 l
S
25.9945 9.3312 m
25.9945 10.8184 l
S
8.1753 9.3312 m
8.1753 10.8184 l
S
364.621 9.3312 m
364.621 10.8184 l
S
382.444 9.3312 m
382.444 10.8184 l
S
400.2671 9.3312 m
400.2671 10.8184 l
S
0.7932 w
4.2014 9.3312 m
400.7986 9.3312 l
S
257.6865 54.1982 m
260.1652 54.1982 l
S
0 O
1 1 1 0 k
0 0 m
F
0 To
10 0 0 10 235.679 51.1632 0 Tp
TP
0 Tr
0 J 0 j 1 w 4 M
(0.1) Tx 
(\r) TX 
TO
0 R
1 1 1 0 K
1 J 1 j 0.7932 w 500 M
257.6865 99.0692 m
260.1652 99.0692 l
S
0 O
1 1 1 0 k
0 0 m
F
0 To
10 0 0 10 236.019 96.0342 0 Tp
TP
0 Tr
0 J 0 j 1 w 4 M
(0.2) Tx 
(\r) TX 
TO
0 R
1 1 1 0 K
1 J 1 j 0.7932 w 500 M
257.6865 143.9363 m
260.1652 143.9363 l
S
0 O
1 1 1 0 k
0 0 m
F
0 To
10 0 0 10 236.069 140.9013 0 Tp
TP
0 Tr
0 J 0 j 1 w 4 M
(0.3) Tx 
(\r) TX 
TO
0 R
1 1 1 0 K
1 J 1 j 0.7932 w 500 M
257.6865 188.8073 m
260.1652 188.8073 l
S
0 O
1 1 1 0 k
0 0 m
F
0 To
10 0 0 10 235.729 185.7723 0 Tp
TP
0 Tr
0 J 0 j 1 w 4 M
(0.4) Tx 
(\r) TX 
TO
0 R
1 1 1 0 K
1 J 1 j 0.7932 w 500 M
257.6865 233.6783 m
260.1652 233.6783 l
S
0 O
1 1 1 0 k
0 0 m
F
0 To
10 0 0 10 235.759 230.6433 0 Tp
TP
0 Tr
0 J 0 j 1 w 4 M
(0.5) Tx 
(\r) TX 
TO
0 R
1 1 1 0 K
1 J 1 j 0.3966 w 500 M
257.6865 18.3022 m
259.1737 18.3022 l
S
257.6865 27.2772 m
259.1737 27.2772 l
S
257.6865 36.2522 m
259.1737 36.2522 l
S
257.6865 45.2232 m
259.1737 45.2232 l
S
257.6865 63.1732 m
259.1737 63.1732 l
S
257.6865 72.1482 m
259.1737 72.1482 l
S
257.6865 81.1192 m
259.1737 81.1192 l
S
257.6865 90.0942 m
259.1737 90.0942 l
S
257.6865 108.0442 m
259.1737 108.0442 l
S
257.6865 117.0152 m
259.1737 117.0152 l
S
257.6865 125.9902 m
259.1737 125.9902 l
S
257.6865 134.9652 m
259.1737 134.9652 l
S
257.6865 152.9113 m
259.1737 152.9113 l
S
257.6865 161.8862 m
259.1737 161.8862 l
S
257.6865 170.8612 m
259.1737 170.8612 l
S
257.6865 179.8323 m
259.1737 179.8323 l
S
257.6865 197.7823 m
259.1737 197.7823 l
S
257.6865 206.7572 m
259.1737 206.7572 l
S
257.6865 215.7283 m
259.1737 215.7283 l
S
257.6865 224.7033 m
259.1737 224.7033 l
S
257.6865 242.6493 m
259.1737 242.6493 l
S
0.7932 w
257.6865 3.4933 m
257.6865 248.6022 l
S
q
0 J 0 j 1 w 4 M
4.2014 3.4933 m
400.7986 3.4933 l
400.7986 248.6022 l
4.2014 248.6022 l
4.2014 3.4933 l
h
W
n
0 R
1 1 1 0 K
1 J 1 j 1.5864 w 500 M
194.6751 9.3312 m
198.772 81.7935 l
202.8728 136.5794 l
206.9696 176.9292 l
211.0665 205.5397 l
213.1129 216.1685 l
215.1633 224.6834 l
217.2138 231.3066 l
218.237 233.9717 l
219.2602 236.2403 l
220.2834 238.132 l
221.3106 239.6708 l
222.3338 240.8765 l
222.8454 241.3643 l
223.357 241.7728 l
223.8687 242.1099 l
224.3842 242.3717 l
224.6381 242.4787 l
224.8958 242.566 l
225.1497 242.6413 l
225.4074 242.6969 l
225.6613 242.7365 l
225.9191 242.7603 l
226.1768 242.7683 l
226.4307 242.7603 l
226.6885 242.7365 l
226.9423 242.7008 l
227.2001 242.6493 l
227.4579 242.5819 l
227.9695 242.4074 l
228.4811 242.1773 l
229.5043 241.5586 l
230.5275 240.7416 l
231.5547 239.7383 l
235.6516 234.1185 l
239.7484 226.4404 l
243.8452 217.2948 l
252.0389 196.3862 l
260.2366 174.1451 l
268.4303 152.2807 l
276.624 131.7845 l
284.8217 113.1802 l
293.0154 96.6738 l
301.2091 82.2813 l
309.4067 69.8995 l
317.6004 59.3619 l
325.7941 50.4742 l
333.9918 43.034 l
342.1855 36.8431 l
350.3792 31.7191 l
S
[]489.0333 d
350.3792 31.7191 m
358.5768 27.4993 l
366.7705 24.037 l
374.9642 21.2093 l
383.1619 18.9051 l
391.3556 17.0331 l
S
[]0 d
180.5127 9.3312 m
180.7903 9.3748 l
181.0639 9.5017 l
181.3376 9.7159 l
181.6112 10.0094 l
182.1625 10.8224 l
182.7098 11.9289 l
183.8084 14.9351 l
184.907 18.8813 l
187.1041 29.0619 l
189.3012 41.5389 l
198.0859 100.8896 l
202.4762 129.9364 l
206.8705 155.743 l
211.2608 177.3337 l
215.6551 194.316 l
220.0455 206.7017 l
222.2426 211.2467 l
224.4398 214.7526 l
225.5383 216.1328 l
226.6369 217.275 l
227.7355 218.1872 l
228.2828 218.556 l
228.834 218.8733 l
229.3814 219.139 l
229.9287 219.3492 l
230.2063 219.4325 l
230.4799 219.5078 l
230.7536 219.5673 l
231.0272 219.6149 l
231.3048 219.6506 l
231.5785 219.6744 l
231.8522 219.6823 l
232.1258 219.6823 l
232.3995 219.6704 l
232.6771 219.6466 l
232.9507 219.607 l
233.2244 219.5594 l
233.7756 219.4285 l
234.323 219.254 l
235.4215 218.7781 l
236.5201 218.1316 l
237.6187 217.3305 l
239.8119 215.2801 l
242.009 212.6943 l
246.4033 206.1386 l
250.7936 198.1035 l
259.5783 179.1303 l
268.3668 158.3129 l
277.1515 137.4479 l
S
[]316.5498 d
277.1515 137.4479 m
285.9361 117.6895 l
294.7207 99.7117 l
303.5054 83.824 l
312.29 70.1057 l
321.0746 58.4775 l
329.8592 48.7609 l
338.6439 40.7457 l
347.4325 34.2058 l
356.2171 28.9191 l
365.0017 24.6795 l
373.7863 21.3005 l
382.571 18.6314 l
391.3556 16.5255 l
S
[]0 d
116.7874 9.3312 m
117.1483 9.3312 l
117.5053 9.3312 l
117.8622 9.3312 l
118.2191 9.3312 l
118.5761 9.3312 l
118.933 9.3312 l
119.29 9.3312 l
119.6509 9.3312 l
120.0078 9.3312 l
120.3647 9.3312 l
120.7217 9.3312 l
121.0786 9.3312 l
121.4355 9.3312 l
121.7925 9.3312 l
122.1534 9.3312 l
122.5103 9.3312 l
122.8673 9.3312 l
123.2242 9.3312 l
123.5811 9.3312 l
123.9381 9.3312 l
124.295 9.3312 l
124.6559 9.3312 l
125.0129 9.3312 l
125.3698 9.3312 l
125.7267 9.3312 l
126.0837 9.3312 l
126.4406 9.3312 l
126.7975 9.3312 l
127.1584 9.3312 l
127.5154 9.3312 l
127.8723 9.3312 l
128.2293 9.3312 l
128.5862 9.3312 l
128.9431 9.3312 l
129.3001 9.3312 l
129.661 9.3312 l
130.0179 9.3312 l
130.3748 9.3312 l
131.0887 9.3312 l
131.8026 9.3312 l
132.5204 9.3312 l
133.2343 9.3352 l
133.9482 9.3352 l
134.666 9.3391 l
135.3799 9.3431 l
136.0938 9.3471 l
136.8077 9.351 l
137.5255 9.359 l
138.2394 9.3669 l
S
[]21.4521 d
138.2394 9.3669 m
138.9532 9.3788 l
139.6711 9.3907 l
140.385 9.4066 l
141.0988 9.4224 l
142.5306 9.47 l
143.9583 9.5374 l
145.39 9.6286 l
146.8217 9.7516 l
148.2495 9.9063 l
149.6812 10.1085 l
151.1089 10.3624 l
152.5407 10.6757 l
153.9684 11.0643 l
156.8318 12.0875 l
159.6913 13.5153 l
162.5508 15.4388 l
165.4102 17.9334 l
168.2697 21.0784 l
173.9886 29.5378 l
179.7115 41.0828 l
185.4305 55.626 l
196.8723 91.641 l
208.3101 130.8803 l
214.033 149.096 l
219.752 165.1066 l
225.4709 178.1904 l
228.3304 183.4691 l
231.1938 187.8554 l
234.0533 191.3217 l
235.481 192.7098 l
236.9127 193.8678 l
238.3405 194.7959 l
239.0583 195.1766 l
239.7722 195.4979 l
240.4861 195.7636 l
241.2039 195.9738 l
241.5608 196.0571 l
241.9178 196.1284 l
242.2747 196.184 l
242.6317 196.2276 l
242.9886 196.2593 l
243.3455 196.2752 l
243.7064 196.2752 l
244.0634 196.2672 l
244.4203 196.2435 l
244.7773 196.2038 l
245.1342 196.1562 l
245.4911 196.0927 l
246.209 195.9262 l
246.9228 195.712 l
S
[]252.9929 d
246.9228 195.712 m
248.3506 195.129 l
249.7823 194.3477 l
251.214 193.384 l
254.0735 190.9132 l
259.7924 184.0402 l
265.5113 175.0255 l
276.9532 152.6614 l
288.395 127.7392 l
299.8329 103.3049 l
311.2747 81.3334 l
322.7126 62.8044 l
334.1544 47.9518 l
345.5962 36.5378 l
357.0341 28.0704 l
362.757 24.7628 l
368.4759 21.9747 l
379.9138 17.7073 l
385.6367 16.1051 l
391.3556 14.7844 l
S
[]0 d
13.6444 9.3312 m
14.1362 9.3312 l
14.628 9.3312 l
15.1198 9.3312 l
15.6115 9.3312 l
16.1033 9.3312 l
16.5951 9.3312 l
17.0869 9.3312 l
17.5787 9.3312 l
18.0704 9.3312 l
18.5622 9.3312 l
19.054 9.3312 l
19.5458 9.3312 l
20.0376 9.3312 l
20.5293 9.3312 l
21.0211 9.3312 l
21.5129 9.3312 l
22.0047 9.3312 l
22.4965 9.3312 l
22.9882 9.3312 l
23.48 9.3312 l
23.9718 9.3312 l
24.4636 9.3312 l
24.9554 9.3312 l
25.4471 9.3312 l
25.9389 9.3312 l
26.4307 9.3312 l
26.9225 9.3312 l
27.4143 9.3312 l
27.9061 9.3312 l
28.3978 9.3312 l
28.8896 9.3312 l
29.3814 9.3312 l
29.8732 9.3312 l
30.365 9.3312 l
30.8567 9.3312 l
31.3485 9.3312 l
31.8403 9.3312 l
32.3321 9.3312 l
32.8239 9.3312 l
33.3156 9.3312 l
33.8074 9.3312 l
34.2992 9.3312 l
34.791 9.3312 l
35.2828 9.3312 l
35.7745 9.3312 l
36.2663 9.3312 l
36.7581 9.3312 l
37.2499 9.3312 l
37.7417 9.3312 l
S
[]24.0972 d
37.7417 9.3312 m
38.2334 9.3312 l
38.7252 9.3312 l
39.217 9.3312 l
39.7088 9.3312 l
40.2006 9.3312 l
40.6923 9.3312 l
41.1841 9.3312 l
41.6759 9.3312 l
42.1677 9.3312 l
42.6595 9.3312 l
43.1512 9.3312 l
43.643 9.3312 l
44.1348 9.3312 l
44.6266 9.3312 l
45.1184 9.3312 l
45.6101 9.3312 l
46.1019 9.3312 l
46.5937 9.3312 l
47.0855 9.3312 l
47.5812 9.3312 l
48.073 9.3312 l
48.5648 9.3312 l
49.0566 9.3312 l
49.5484 9.3312 l
50.0401 9.3312 l
50.5319 9.3312 l
51.0237 9.3312 l
51.5155 9.3312 l
52.0073 9.3312 l
52.499 9.3312 l
52.9908 9.3312 l
53.4826 9.3312 l
53.9744 9.3312 l
54.4662 9.3312 l
54.9579 9.3312 l
55.4497 9.3312 l
55.9415 9.3312 l
56.4333 9.3312 l
56.9251 9.3312 l
57.4168 9.3312 l
57.9086 9.3312 l
58.4004 9.3312 l
58.8922 9.3312 l
59.8757 9.3312 l
60.3675 9.3312 l
60.8593 9.3312 l
61.3511 9.3312 l
61.8429 9.3312 l
62.3346 9.3312 l
62.8264 9.3312 l
S
[]49.182 d
62.8264 9.3312 m
63.3182 9.3312 l
63.81 9.3312 l
64.3018 9.3312 l
64.7935 9.3312 l
65.7771 9.3312 l
66.2689 9.3312 l
66.7607 9.3312 l
67.2525 9.3312 l
67.7442 9.3312 l
68.236 9.3312 l
68.7278 9.3312 l
69.7114 9.3312 l
70.2031 9.3312 l
70.6949 9.3312 l
71.6785 9.3312 l
72.662 9.3312 l
73.6456 9.3312 l
74.6292 9.3312 l
75.6127 9.3312 l
76.5963 9.3312 l
77.5798 9.3312 l
78.5634 9.3312 l
79.547 9.3312 l
80.5305 9.3312 l
81.5141 9.3312 l
82.4976 9.3312 l
83.4812 9.3312 l
84.4648 9.3312 l
85.4483 9.3312 l
86.4319 9.3312 l
87.4154 9.3312 l
88.399 9.3312 l
89.3826 9.3312 l
90.3661 9.3312 l
91.3497 9.3312 l
92.3333 9.3312 l
93.3168 9.3312 l
94.3004 9.3312 l
95.2839 9.3312 l
96.2675 9.3312 l
98.2346 9.3312 l
99.2182 9.3312 l
100.2017 9.3352 l
101.1853 9.3352 l
102.1689 9.3352 l
103.1524 9.3352 l
104.136 9.3391 l
106.1031 9.3431 l
108.0702 9.3471 l
110.0413 9.355 l
S
[]96.3969 d
110.0413 9.355 m
112.0084 9.3669 l
113.9756 9.3828 l
115.9427 9.4026 l
117.9098 9.4303 l
119.8769 9.466 l
121.844 9.5097 l
123.8112 9.5692 l
125.7783 9.6445 l
127.7454 9.7397 l
129.7125 9.8587 l
131.6797 10.0054 l
133.6468 10.1878 l
135.6139 10.4099 l
137.581 10.6796 l
139.5481 11.0009 l
143.4824 11.8456 l
147.4166 13.0196 l
151.3509 14.598 l
155.2851 16.6841 l
159.2194 19.3651 l
163.1536 22.7401 l
171.0221 31.8896 l
178.8945 44.6283 l
186.763 61.0356 l
202.5 102.4839 l
218.237 146.4507 l
226.1055 165.0392 l
230.0397 172.7728 l
233.9779 179.2493 l
237.9122 184.3614 l
239.8793 186.3761 l
241.8464 188.022 l
243.8135 189.2951 l
244.7971 189.7908 l
245.7806 190.1914 l
246.2724 190.358 l
246.7642 190.5007 l
247.256 190.6197 l
247.7478 190.7149 l
248.2395 190.7902 l
248.7313 190.8378 l
249.2231 190.8656 l
249.7149 190.8696 l
250.2067 190.8497 l
250.6984 190.8101 l
251.1902 190.7466 l
251.682 190.6594 l
252.6656 190.4174 l
253.6491 190.0883 l
255.6163 189.1682 l
S
[]352.0194 d
255.6163 189.1682 m
257.5834 187.9109 l
261.5176 184.4368 l
265.4519 179.7807 l
273.3203 167.4703 l
281.1888 152.1934 l
296.9298 117.622 l
312.6667 84.3793 l
328.4037 57.3194 l
336.2722 46.6589 l
344.1407 37.8664 l
352.0092 30.7911 l
359.8816 25.2189 l
367.7501 20.9198 l
375.6186 17.6597 l
383.4871 15.2365 l
391.3556 13.4637 l
S
Q
0 A
0 To
1 0 0 1 124 230 0 Tp
TP
0 Tr
0 O
0 g
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Helvetica 12 Tf
0 Ts
100 Tz
0 Tt
0 TA
%_ 0 XL
36 0 Xb
XB
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 0 2 2 3 Th
0 Tq
0 0 Tl
0 Tc
0 Tw
(n =   2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 124 206 0 Tp
TP
0 Tr
(n =   3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 124 182 0 Tp
TP
0 Tr
(n = 10) Tx 
(\r) TX 
TO
0 To
1 0 0 1 124 158 0 Tp
TP
0 Tr
(n = 30) Tx 
(\r) TX 
TO
0 R
0 G
162 187 m
230 187 l
B
162 211 m
220 211 l
B
162 235 m
216 235 l
B
162 163 m
224 163 l
B
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
